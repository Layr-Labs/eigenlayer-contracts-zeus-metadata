{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_operatorTableUpdater",
          "type": "address",
          "internalType": "contract IOperatorTableUpdater"
        },
        {
          "name": "_version",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "OPERATOR_INFO_LEAF_SALT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "OPERATOR_TABLE_LEAF_SALT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "calculateCertificateDigest",
      "inputs": [
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        },
        {
          "name": "messageHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "calculateOperatorInfoLeaf",
      "inputs": [
        {
          "name": "operatorInfo",
          "type": "tuple",
          "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
          "components": [
            {
              "name": "pubkey",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "weights",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "calculateOperatorTableLeaf",
      "inputs": [
        {
          "name": "operatorTableBytes",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getNonsignerOperatorInfo",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        },
        {
          "name": "operatorIndex",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
          "components": [
            {
              "name": "pubkey",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "weights",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getOperatorCount",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getOperatorSetInfo",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo",
          "components": [
            {
              "name": "operatorInfoTreeRoot",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "numOperators",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "aggregatePubkey",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "totalWeights",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getOperatorSetOwner",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTotalStakeWeights",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isNonsignerCached",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        },
        {
          "name": "operatorIndex",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isReferenceTimestampSet",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "latestReferenceTimestamp",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint32",
          "internalType": "uint32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxOperatorTableStaleness",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint32",
          "internalType": "uint32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "operatorTableUpdater",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IOperatorTableUpdater"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "trySignatureVerification",
      "inputs": [
        {
          "name": "msgHash",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "aggPubkey",
          "type": "tuple",
          "internalType": "struct BN254.G1Point",
          "components": [
            {
              "name": "X",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "Y",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "apkG2",
          "type": "tuple",
          "internalType": "struct BN254.G2Point",
          "components": [
            {
              "name": "X",
              "type": "uint256[2]",
              "internalType": "uint256[2]"
            },
            {
              "name": "Y",
              "type": "uint256[2]",
              "internalType": "uint256[2]"
            }
          ]
        },
        {
          "name": "signature",
          "type": "tuple",
          "internalType": "struct BN254.G1Point",
          "components": [
            {
              "name": "X",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "Y",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "pairingSuccessful",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "signatureValid",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "updateOperatorTable",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "internalType": "uint32"
        },
        {
          "name": "operatorSetInfo",
          "type": "tuple",
          "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo",
          "components": [
            {
              "name": "operatorInfoTreeRoot",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "numOperators",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "aggregatePubkey",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "totalWeights",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "operatorSetConfig",
          "type": "tuple",
          "internalType": "struct ICrossChainRegistryTypes.OperatorSetConfig",
          "components": [
            {
              "name": "owner",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "maxStalenessPeriod",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "verifyCertificate",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "cert",
          "type": "tuple",
          "internalType": "struct IBN254CertificateVerifierTypes.BN254Certificate",
          "components": [
            {
              "name": "referenceTimestamp",
              "type": "uint32",
              "internalType": "uint32"
            },
            {
              "name": "messageHash",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "signature",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "apk",
              "type": "tuple",
              "internalType": "struct BN254.G2Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256[2]",
                  "internalType": "uint256[2]"
                },
                {
                  "name": "Y",
                  "type": "uint256[2]",
                  "internalType": "uint256[2]"
                }
              ]
            },
            {
              "name": "nonSignerWitnesses",
              "type": "tuple[]",
              "internalType": "struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]",
              "components": [
                {
                  "name": "operatorIndex",
                  "type": "uint32",
                  "internalType": "uint32"
                },
                {
                  "name": "operatorInfoProof",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "operatorInfo",
                  "type": "tuple",
                  "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
                  "components": [
                    {
                      "name": "pubkey",
                      "type": "tuple",
                      "internalType": "struct BN254.G1Point",
                      "components": [
                        {
                          "name": "X",
                          "type": "uint256",
                          "internalType": "uint256"
                        },
                        {
                          "name": "Y",
                          "type": "uint256",
                          "internalType": "uint256"
                        }
                      ]
                    },
                    {
                      "name": "weights",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "totalSignedStakeWeights",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "verifyCertificateNominal",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "cert",
          "type": "tuple",
          "internalType": "struct IBN254CertificateVerifierTypes.BN254Certificate",
          "components": [
            {
              "name": "referenceTimestamp",
              "type": "uint32",
              "internalType": "uint32"
            },
            {
              "name": "messageHash",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "signature",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "apk",
              "type": "tuple",
              "internalType": "struct BN254.G2Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256[2]",
                  "internalType": "uint256[2]"
                },
                {
                  "name": "Y",
                  "type": "uint256[2]",
                  "internalType": "uint256[2]"
                }
              ]
            },
            {
              "name": "nonSignerWitnesses",
              "type": "tuple[]",
              "internalType": "struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]",
              "components": [
                {
                  "name": "operatorIndex",
                  "type": "uint32",
                  "internalType": "uint32"
                },
                {
                  "name": "operatorInfoProof",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "operatorInfo",
                  "type": "tuple",
                  "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
                  "components": [
                    {
                      "name": "pubkey",
                      "type": "tuple",
                      "internalType": "struct BN254.G1Point",
                      "components": [
                        {
                          "name": "X",
                          "type": "uint256",
                          "internalType": "uint256"
                        },
                        {
                          "name": "Y",
                          "type": "uint256",
                          "internalType": "uint256"
                        }
                      ]
                    },
                    {
                      "name": "weights",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "totalStakeNominalThresholds",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "verifyCertificateProportion",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "cert",
          "type": "tuple",
          "internalType": "struct IBN254CertificateVerifierTypes.BN254Certificate",
          "components": [
            {
              "name": "referenceTimestamp",
              "type": "uint32",
              "internalType": "uint32"
            },
            {
              "name": "messageHash",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "signature",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "apk",
              "type": "tuple",
              "internalType": "struct BN254.G2Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256[2]",
                  "internalType": "uint256[2]"
                },
                {
                  "name": "Y",
                  "type": "uint256[2]",
                  "internalType": "uint256[2]"
                }
              ]
            },
            {
              "name": "nonSignerWitnesses",
              "type": "tuple[]",
              "internalType": "struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]",
              "components": [
                {
                  "name": "operatorIndex",
                  "type": "uint32",
                  "internalType": "uint32"
                },
                {
                  "name": "operatorInfoProof",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "operatorInfo",
                  "type": "tuple",
                  "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
                  "components": [
                    {
                      "name": "pubkey",
                      "type": "tuple",
                      "internalType": "struct BN254.G1Point",
                      "components": [
                        {
                          "name": "X",
                          "type": "uint256",
                          "internalType": "uint256"
                        },
                        {
                          "name": "Y",
                          "type": "uint256",
                          "internalType": "uint256"
                        }
                      ]
                    },
                    {
                      "name": "weights",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "totalStakeProportionThresholds",
          "type": "uint16[]",
          "internalType": "uint16[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaxStalenessPeriodUpdated",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "maxStalenessPeriod",
          "type": "uint32",
          "indexed": false,
          "internalType": "uint32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OperatorSetOwnerUpdated",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "owner",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TableUpdated",
      "inputs": [
        {
          "name": "operatorSet",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct OperatorSet",
          "components": [
            {
              "name": "avs",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "id",
              "type": "uint32",
              "internalType": "uint32"
            }
          ]
        },
        {
          "name": "referenceTimestamp",
          "type": "uint32",
          "indexed": false,
          "internalType": "uint32"
        },
        {
          "name": "operatorSetInfo",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo",
          "components": [
            {
              "name": "operatorInfoTreeRoot",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "numOperators",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "aggregatePubkey",
              "type": "tuple",
              "internalType": "struct BN254.G1Point",
              "components": [
                {
                  "name": "X",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "Y",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "totalWeights",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ArrayLengthMismatch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "CertificateStale",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ECAddFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ECMulFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ECPairingFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "EmptyRoot",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ExpModFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidIndex",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidOperatorIndex",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidProofLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidShortString",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NonSignerIndicesNotSorted",
      "inputs": []
    },
    {
      "type": "error",
      "name": "OnlyTableUpdater",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ReferenceTimestampDoesNotExist",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RootDisabled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "StringTooLong",
      "inputs": [
        {
          "name": "str",
          "type": "string",
          "internalType": "string"
        }
      ]
    },
    {
      "type": "error",
      "name": "TableUpdateStale",
      "inputs": []
    },
    {
      "type": "error",
      "name": "VerificationFailed",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60c060405234801561000f575f5ffd5b50604051612e71380380612e7183398101604081905261002e9161016a565b6001600160a01b0382166080528061004581610058565b60a0525061005161009e565b5050610294565b5f5f829050601f8151111561008b578260405163305a27a960e01b81526004016100829190610239565b60405180910390fd5b80516100968261026e565b179392505050565b5f54610100900460ff16156101055760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608401610082565b5f5460ff90811614610154575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b634e487b7160e01b5f52604160045260245ffd5b5f5f6040838503121561017b575f5ffd5b82516001600160a01b0381168114610191575f5ffd5b60208401519092506001600160401b038111156101ac575f5ffd5b8301601f810185136101bc575f5ffd5b80516001600160401b038111156101d5576101d5610156565b604051601f8201601f19908116603f011681016001600160401b038111828210171561020357610203610156565b60405281815282820160200187101561021a575f5ffd5b8160208401602083015e5f602083830101528093505050509250929050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561028e575f198160200360031b1b821691505b50919050565b60805160a051612bae6102c35f395f6106d501525f81816102a6015281816108200152610ff50152612bae5ff3fe608060405234801561000f575f5ffd5b5060043610610132575f3560e01c80635ddb9b5b116100b4578063848189201161007957806384818920146102f3578063a2c902f514610306578063a2f2e24d1461030e578063cd83a72b14610321578063dd2ae1b914610334578063eb39e68f14610347575f5ffd5b80635ddb9b5b146102515780636141879e146102795780636738c40b1461028c57806368d6e081146102a15780637d1d1f5b146102e0575f5ffd5b806323c2a3cb116100fa57806323c2a3cb146101e357806326af6a3c146101f6578063538a37901461021657806354fd4d50146102295780635be872741461023e575f5ffd5b8063017d797414610136578063080b71501461015e578063121409ea1461017e57806318467434146101985780631a18746c146101b9575b5f5ffd5b610149610144366004612461565b610367565b60405190151581526020015b60405180910390f35b61017161016c36600461253c565b6104f8565b6040516101559190612587565b610186608e81565b60405160ff9091168152602001610155565b6101ab6101a63660046125be565b61050d565b604051908152602001610155565b6101cc6101c73660046125e6565b610570565b604080519215158352901515602083015201610155565b6101ab6101f1366004612634565b610591565b610209610204366004612666565b6105c7565b60405161015591906126db565b6101ab610224366004612708565b61067f565b6102316106ce565b6040516101559190612739565b61014961024c366004612666565b6106fe565b61026461025f36600461276e565b6107c9565b60405163ffffffff9091168152602001610155565b61026461028736600461276e565b6107ef565b61029f61029a36600461279e565b610815565b005b6102c87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610155565b6101716102ee366004612634565b6109fb565b6102c861030136600461276e565b610a7b565b610186607581565b6101ab61031c366004612857565b610aa4565b61014961032f366004612634565b610abb565b6101496103423660046128c3565b610af1565b61035a610355366004612634565b610b84565b604051610155919061297b565b5f5f6103738585610c49565b90505f61037f86610de6565b5f8181526004602081815260408084208a5163ffffffff16855282528084208151608081018352815481526001820154818501528251808401845260028301548152600383015481860152818401529381018054835181860281018601909452808452969750949593949093606086019383018282801561041d57602002820191905f5260205f20905b815481526020019060010190808311610409575b50505050508152505090505f8160600151905085518451146104525760405163512509d360e11b815260040160405180910390fd5b5f5b84518110156104e7575f6127108883815181106104735761047361298d565b602002602001015161ffff168484815181106104915761049161298d565b60200260200101516104a391906129b5565b6104ad91906129e0565b9050808683815181106104c2576104c261298d565b602002602001015110156104de575f96505050505050506104f1565b50600101610454565b5060019450505050505b9392505050565b60606105048383610c49565b90505b92915050565b604080517fd9f77a423768f4b0526fa60a7c732334516a93f1d228dce50ad804ea74ced36e602082015263ffffffff841691810191909152606081018290525f906080015b60405160208183030381529060405280519060200120905092915050565b5f5f61058486848787600162061a80610e49565b9150915094509492505050565b5f5f61059c84610de6565b5f90815260046020908152604080832063ffffffff8716845290915290206001015491505092915050565b6105cf611dfa565b5f6105d985610de6565b5f81815260056020908152604080832063ffffffff89168452825280832087845282529182902082516080810184528154818501908152600183015460608301528152600282018054855181860281018601909652808652959650909491938584019390929083018282801561066c57602002820191905f5260205f20905b815481526020019060010190808311610658575b5050505050815250509150509392505050565b5f60758260405160200161069391906126db565b60408051601f19818403018152908290526106b192916020016129f3565b604051602081830303815290604052805190602001209050919050565b60606106f97f0000000000000000000000000000000000000000000000000000000000000000610f11565b905090565b5f5f61070985610de6565b5f81815260056020908152604080832063ffffffff8916845282528083208784528252808320815160808101835281548184019081526001830154606083015281526002820180548451818702810187019095528085529697509495909491938581019392919083018282801561079d57602002820191905f5260205f20905b815481526020019060010190808311610789575b50505091909252505081515191925050158015906107bf575080516020015115155b9695505050505050565b5f5f6107d483610de6565b5f9081526003602052604090205463ffffffff169392505050565b5f5f6107fa83610de6565b5f9081526002602052604090205463ffffffff169392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461085e5760405163030c1b6b60e11b815260040160405180910390fd5b5f6108766108713687900387018761276e565b610de6565b5f8181526003602052604090205490915063ffffffff908116908516116108b057604051632f20889f60e01b815260040160405180910390fd5b5f81815260046020818152604080842063ffffffff8916855282529283902086518155818701516001820155928601518051600285015581015160038401556060860151805187949361090893908501920190611e24565b5050505f818152600360209081526040909120805463ffffffff191663ffffffff871617905561093a90830183612a1c565b5f8281526001602090815260409182902080546001600160a01b0319166001600160a01b03949094169390931790925561097991908401908401612a35565b5f828152600260209081526040808320805463ffffffff191663ffffffff958616179055600682528083209388168352929052819020805460ff19166001179055517f93e6bea1c9b5dce4a5c07b00261e956df2a4a253d9ab6ca070ca2037d72ada9e906109ec90879087908790612a4e565b60405180910390a15050505050565b60605f610a0784610de6565b5f81815260046020818152604080842063ffffffff891685528252928390209091018054835181840281018401909452808452939450919290830182828015610a6d57602002820191905f5260205f20905b815481526020019060010190808311610a59575b505050505091505092915050565b5f5f610a8683610de6565b5f908152600160205260409020546001600160a01b03169392505050565b5f608e838360405160200161055293929190612a9a565b5f5f610ac684610de6565b5f90815260066020908152604080832063ffffffff8716845290915290205460ff1691505092915050565b5f5f610afd8585610c49565b90508251815114610b215760405163512509d360e11b815260040160405180910390fd5b5f5b8151811015610b7857838181518110610b3e57610b3e61298d565b6020026020010151828281518110610b5857610b5861298d565b60200260200101511015610b70575f925050506104f1565b600101610b23565b50600195945050505050565b610b8c611e6d565b5f610b9684610de6565b5f81815260046020818152604080842063ffffffff8916855282529283902083516080810185528154815260018201548184015284518086018652600283015481526003830154818501528186015292810180548551818502810185019096528086529596509294909360608601939092909190830182828015610c3757602002820191905f5260205f20905b815481526020019060010190808311610c23575b50505050508152505091505092915050565b6060610c53611e9f565b610c5c84610de6565b8082528351610c6b9190610f4e565b80515f908152600460208181526040808420875163ffffffff1685528252928390208351608081018552815481526001820154818401528451808601865260028301548152600383015481850152818601529281018054855181850281018501909652808652939491936060860193830182828015610d0757602002820191905f5260205f20905b815481526020019060010190808311610cf3575b505050919092525050506020820181905260600151516001600160401b03811115610d3457610d34611fcd565b604051908082528060200260200182016040528015610d5d578160200160208202803683370190505b5060408201525f5b81602001516060015151811015610dc1578160200151606001518181518110610d9057610d9061298d565b602002602001015182604001518281518110610dae57610dae61298d565b6020908102919091010152600101610d65565b50610dcc8184611088565b6060820152610ddb81846111e5565b604001519392505050565b5f815f0151826020015163ffffffff16604051602001610e3192919060609290921b6bffffffffffffffffffffffff1916825260a01b6001600160a01b031916601482015260200190565b60405160208183030381529060405261050790612ac1565b5f5f5f610e5589611264565b90505f610e648a89898c6112ee565b90505f610e7b610e748a846113a2565b8b9061140a565b90505f610ebd610eb684610eb06040805180820182525f80825260209182015281518083019092526001825260029082015290565b906113a2565b859061140a565b90508715610ee257610ed982610ed161147e565b838c8b61153e565b96509450610f02565b610ef582610eee61147e565b838c611752565b95508515610f0257600194505b50505050965096945050505050565b60605f610f1d83611989565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f8281526002602052604090205463ffffffff16801580610f7e5750610f748183612ae4565b63ffffffff164211155b610f9b5760405163640fcd6b60e11b815260040160405180910390fd5b5f83815260066020908152604080832063ffffffff8616845290915290205460ff16610fda57604051630cad17b760e31b815260040160405180910390fd5b60405163193877e160e21b815263ffffffff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906364e1df8490602401602060405180830381865afa158015611042573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110669190612b00565b61108357604051631b14174b60e01b815260040160405180910390fd5b505050565b6040805180820182525f80825260209182018190528251808401909352808352908201819052805b8360800151518110156111dd575f846080015182815181106110d4576110d461298d565b602002602001015190505f82111561111057805163ffffffff80851691161161111057604051631d8c4d1760e31b815260040160405180910390fd5b6020808701510151815163ffffffff161061113e576040516301fa53c760e11b815260040160405180910390fd5b855185515f9161114e91846119b0565b805190915061115e90869061140a565b94505f5b8160200151518110156111d0578760400151518110156111c857816020015181815181106111925761119261298d565b6020026020010151886040015182815181106111b0576111b061298d565b602002602001018181516111c49190612b1f565b9052505b600101611162565b50505191506001016110b0565b505092915050565b5f6112056111f68460600151611b27565b6020850151604001519061140a565b90505f611219835f0151846020015161050d565b90505f5f611231838587606001518860400151610570565b9150915081801561123f5750805b61125c5760405163439cc0cd60e01b815260040160405180910390fd5b505050505050565b604080518082019091525f80825260208201525f80806112915f516020612b595f395f51905f5286612b32565b90505b61129d81611bbd565b90935091505f516020612b595f395f51905f5282830983036112d5576040805180820190915290815260208101919091529392505050565b5f516020612b595f395f51905f52600182089050611294565b8251602080850151845180519083015186840151805190850151875188870151604080519889018e90528801989098526060870195909552608086019390935260a085019190915260c084015260e08301526101008201526101208101919091525f907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019061014001604051602081830303815290604052805190602001205f1c6113999190612b32565b95945050505050565b604080518082019091525f80825260208201526113bd611ee4565b835181526020808501519082015260408082018490525f908360608460076107d05a03fa905080806113eb57fe5b50806111dd57604051632319df1960e11b815260040160405180910390fd5b604080518082019091525f8082526020820152611425611f02565b835181526020808501518183015283516040808401919091529084015160608301525f908360808460066107d05a03fa9050808061145f57fe5b50806111dd5760405163d4b68fd760e01b815260040160405180910390fd5b611486611f20565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820182528681526020808201869052825180840190935286835282018490525f9182919061156f611f40565b5f5b6002811015611726575f6115868260066129b5565b905084826002811061159a5761159a61298d565b602002015151836115ab835f612b45565b600c81106115bb576115bb61298d565b60200201528482600281106115d2576115d261298d565b602002015160200151838260016115e99190612b45565b600c81106115f9576115f961298d565b60200201528382600281106116105761161061298d565b6020020151515183611623836002612b45565b600c81106116335761163361298d565b602002015283826002811061164a5761164a61298d565b6020020151516001602002015183611663836003612b45565b600c81106116735761167361298d565b602002015283826002811061168a5761168a61298d565b6020020151602001515f600281106116a4576116a461298d565b6020020151836116b5836004612b45565b600c81106116c5576116c561298d565b60200201528382600281106116dc576116dc61298d565b6020020151602001516001600281106116f7576116f761298d565b602002015183611708836005612b45565b600c81106117185761171861298d565b602002015250600101611571565b5061172f611f5f565b5f6020826101808560088cfa9151919c9115159b50909950505050505050505050565b6040805180820182528581526020808201859052825180840190935285835282018390525f91611780611f40565b5f5b6002811015611937575f6117978260066129b5565b90508482600281106117ab576117ab61298d565b602002015151836117bc835f612b45565b600c81106117cc576117cc61298d565b60200201528482600281106117e3576117e361298d565b602002015160200151838260016117fa9190612b45565b600c811061180a5761180a61298d565b60200201528382600281106118215761182161298d565b6020020151515183611834836002612b45565b600c81106118445761184461298d565b602002015283826002811061185b5761185b61298d565b6020020151516001602002015183611874836003612b45565b600c81106118845761188461298d565b602002015283826002811061189b5761189b61298d565b6020020151602001515f600281106118b5576118b561298d565b6020020151836118c6836004612b45565b600c81106118d6576118d661298d565b60200201528382600281106118ed576118ed61298d565b6020020151602001516001600281106119085761190861298d565b602002015183611919836005612b45565b600c81106119295761192961298d565b602002015250600101611782565b50611940611f5f565b5f6020826101808560086107d05a03fa9050808061195a57fe5b5080611979576040516324ccc79360e21b815260040160405180910390fd5b5051151598975050505050505050565b5f60ff8216601f81111561050757604051632cd44ac360e21b815260040160405180910390fd5b6119b8611dfa565b5f84815260056020908152604080832063ffffffff8088168552908352818420865190911684528252808320815160808101835281548184019081526001830154606083015281526002820180548451818702810187019095528085529194929385840193909290830182828015611a4d57602002820191905f5260205f20905b815481526020019060010190808311611a39575b5050509190925250508151519192505f911515905080611a71575081516020015115155b905080611b1a575f611a918787875f015188604001518960200151611c39565b905080611ab15760405163439cc0cd60e01b815260040160405180910390fd5b6040808601515f8981526005602090815283822063ffffffff808c1684529082528483208a5190911683528152929020815180518255830151600182015582820151805192939192611b099260028501920190611e24565b509050508460400151935050611b1e565b8192505b50509392505050565b604080518082019091525f80825260208201528151158015611b4b57506020820151155b15611b68575050604080518082019091525f808252602082015290565b6040518060400160405280835f015181526020015f516020612b595f395f51905f528460200151611b999190612b32565b611bb0905f516020612b595f395f51905f52612b1f565b905292915050565b919050565b5f80805f516020612b595f395f51905f5260035f516020612b595f395f51905f52865f516020612b595f395f51905f52888909090890505f611c2d827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f525f516020612b595f395f51905f52611c87565b91959194509092505050565b5f5f611c448461067f565b5f88815260046020908152604080832063ffffffff808c168552925290912054919250611c7b908590839085908a811690611d0016565b98975050505050505050565b5f5f611c91611f5f565b611c99611f7d565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280611cd657fe5b5082611cf55760405163d51edae360e01b815260040160405180910390fd5b505195945050505050565b5f83611d1f576040516329e7276760e11b815260040160405180910390fd5b83611d2b868585611d35565b1495945050505050565b5f83515f03611d455750816104f1565b60208451611d539190612b32565b15611d71576040516313717da960e21b815260040160405180910390fd5b8260205b85518111611dd257611d88600285612b32565b5f03611da957815f528086015160205260405f209150600284049350611dc0565b808601515f528160205260405f2091506002840493505b611dcb602082612b45565b9050611d75565b508215611df2576040516363df817160e01b815260040160405180910390fd5b949350505050565b604080516080810182525f91810182815260608201929092529081905b8152602001606081525090565b828054828255905f5260205f20908101928215611e5d579160200282015b82811115611e5d578251825591602001919060010190611e42565b50611e69929150611f9b565b5090565b60405180608001604052805f81526020015f8152602001611e1760405180604001604052805f81526020015f81525090565b60405180608001604052805f8152602001611eb8611e6d565b815260200160608152602001611edf60405180604001604052805f81526020015f81525090565b905290565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280611f33611faf565b8152602001611edf611faf565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b5b80821115611e69575f8155600101611f9c565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b038111828210171561200357612003611fcd565b60405290565b60405160a081016001600160401b038111828210171561200357612003611fcd565b604051606081016001600160401b038111828210171561200357612003611fcd565b604051608081016001600160401b038111828210171561200357612003611fcd565b604051601f8201601f191681016001600160401b038111828210171561209757612097611fcd565b604052919050565b80356001600160a01b0381168114611bb8575f5ffd5b803563ffffffff81168114611bb8575f5ffd5b5f604082840312156120d8575f5ffd5b6120e0611fe1565b90506120eb8261209f565b81526120f9602083016120b5565b602082015292915050565b5f60408284031215612114575f5ffd5b61211c611fe1565b823581526020928301359281019290925250919050565b5f82601f830112612142575f5ffd5b61214a611fe1565b80604084018581111561215b575f5ffd5b845b8181101561217557803584526020938401930161215d565b509095945050505050565b5f60808284031215612190575f5ffd5b612198611fe1565b90506121a48383612133565b81526120f98360408401612133565b5f6001600160401b038211156121cb576121cb611fcd565b5060051b60200190565b5f82601f8301126121e4575f5ffd5b81356121f76121f2826121b3565b61206f565b8082825260208201915060208360051b860101925085831115612218575f5ffd5b602085015b8381101561223557803583526020928301920161221d565b5095945050505050565b5f6060828403121561224f575f5ffd5b612257611fe1565b90506122638383612104565b815260408201356001600160401b0381111561227d575f5ffd5b612289848285016121d5565b60208301525092915050565b5f61012082840312156122a6575f5ffd5b6122ae612009565b90506122b9826120b5565b8152602082810135908201526122d28360408401612104565b60408201526122e48360808401612180565b60608201526101008201356001600160401b03811115612302575f5ffd5b8201601f81018413612312575f5ffd5b80356123206121f2826121b3565b8082825260208201915060208360051b850101925086831115612341575f5ffd5b602084015b838110156124515780356001600160401b03811115612363575f5ffd5b85016060818a03601f19011215612378575f5ffd5b61238061202b565b61238c602083016120b5565b815260408201356001600160401b038111156123a6575f5ffd5b82016020810190603f018b136123ba575f5ffd5b80356001600160401b038111156123d3576123d3611fcd565b6123e6601f8201601f191660200161206f565b8181528c60208385010111156123fa575f5ffd5b816020840160208301375f6020838301015280602085015250505060608201356001600160401b0381111561242d575f5ffd5b61243c8b60208386010161223f565b60408301525084525060209283019201612346565b5060808501525091949350505050565b5f5f5f60808486031215612473575f5ffd5b61247d85856120c8565b925060408401356001600160401b03811115612497575f5ffd5b6124a386828701612295565b92505060608401356001600160401b038111156124be575f5ffd5b8401601f810186136124ce575f5ffd5b80356124dc6121f2826121b3565b8082825260208201915060208360051b8501019250888311156124fd575f5ffd5b6020840193505b8284101561252e57833561ffff8116811461251d575f5ffd5b825260209384019390910190612504565b809450505050509250925092565b5f5f6060838503121561254d575f5ffd5b61255784846120c8565b915060408301356001600160401b03811115612571575f5ffd5b61257d85828601612295565b9150509250929050565b602080825282518282018190525f918401906040840190835b818110156121755783518352602093840193909201916001016125a0565b5f5f604083850312156125cf575f5ffd5b6125d8836120b5565b946020939093013593505050565b5f5f5f5f61012085870312156125fa575f5ffd5b8435935061260b8660208701612104565b925061261a8660608701612180565b91506126298660e08701612104565b905092959194509250565b5f5f60608385031215612645575f5ffd5b61264f84846120c8565b915061265d604084016120b5565b90509250929050565b5f5f5f60808486031215612678575f5ffd5b61268285856120c8565b9250612690604085016120b5565b929592945050506060919091013590565b5f8151808452602084019350602083015f5b828110156126d15781518652602095860195909101906001016126b3565b5093949350505050565b60208082528251805183830152015160408201525f6020830151606080840152611df260808401826126a1565b5f60208284031215612718575f5ffd5b81356001600160401b0381111561272d575f5ffd5b611df28482850161223f565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f6040828403121561277e575f5ffd5b61050483836120c8565b5f60408284031215612798575f5ffd5b50919050565b5f5f5f5f60c085870312156127b1575f5ffd5b6127bb8686612788565b93506127c9604086016120b5565b925060608501356001600160401b038111156127e3575f5ffd5b850160a081880312156127f4575f5ffd5b6127fc61204d565b81358152602080830135908201526128178860408401612104565b604082015260808201356001600160401b03811115612834575f5ffd5b612840898285016121d5565b606083015250925061262990508660808701612788565b5f5f60208385031215612868575f5ffd5b82356001600160401b0381111561287d575f5ffd5b8301601f8101851361288d575f5ffd5b80356001600160401b038111156128a2575f5ffd5b8560208284010111156128b3575f5ffd5b6020919091019590945092505050565b5f5f5f608084860312156128d5575f5ffd5b6128df85856120c8565b925060408401356001600160401b038111156128f9575f5ffd5b61290586828701612295565b92505060608401356001600160401b03811115612920575f5ffd5b61292c868287016121d5565b9150509250925092565b80518252602081015160208301525f6040820151612961604085018280518252602090810151910152565b50606082015160a06080850152611df260a08501826126a1565b602081525f6105046020830184612936565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610507576105076129a1565b634e487b7160e01b5f52601260045260245ffd5b5f826129ee576129ee6129cc565b500490565b60ff60f81b8360f81b1681525f82518060208501600185015e5f92016001019182525092915050565b5f60208284031215612a2c575f5ffd5b6105048261209f565b5f60208284031215612a45575f5ffd5b610504826120b5565b6001600160a01b03612a5f8561209f565b16815263ffffffff612a73602086016120b5565b16602082015263ffffffff83166040820152608060608201525f6113996080830184612936565b60f884901b6001600160f81b0319168152818360018301375f910160010190815292915050565b80516020808301519190811015612798575f1960209190910360031b1b16919050565b63ffffffff8181168382160190811115610507576105076129a1565b5f60208284031215612b10575f5ffd5b815180151581146104f1575f5ffd5b81810381811115610507576105076129a1565b5f82612b4057612b406129cc565b500690565b80820180821115610507576105076129a156fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a26469706673582212207db5218ea602fe4055ee92b6fa3a433a57d363164f08f843d254f0ebb2345ab464736f6c634300081b0033",
    "sourceMap": "685:15505:184:-:0;;;1676:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2200:44:185;;;;1846:8:184;961:24:182;1846:8:184;961:22:182;:24::i;:::-;950:35;;-1:-1:-1;1866:22:184::2;:20;:22::i;:::-;1676:219:::0;;685:15505;;1711:286:37;1776:11;1799:17;1825:3;1799:30;;1857:2;1843:4;:11;:16;1839:72;;;1896:3;1882:18;;-1:-1:-1;;;1882:18:37;;;;;;;;:::i;:::-;;;;;;;;1839:72;1977:11;;1960:13;1977:4;1960:13;:::i;:::-;1952:36;;1711:286;-1:-1:-1;;;1711:286:37:o;5939:280:26:-;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:26;;2211:2:341;5998:66:26;;;2193:21:341;2250:2;2230:18;;;2223:30;2289:34;2269:18;;;2262:62;-1:-1:-1;;;2340:18:341;;;2333:37;2387:19;;5998:66:26;2009:403:341;5998:66:26;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:26;6140:15;6125:30;;;;;;6174:28;;2559:36:341;;;6174:28:26;;2547:2:341;2532:18;6174:28:26;;;;;;;6074:139;5939:280::o;14:127:341:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1133;266:6;274;327:2;315:9;306:7;302:23;298:32;295:52;;;343:1;340;333:12;295:52;369:16;;-1:-1:-1;;;;;414:31:341;;404:42;;394:70;;460:1;457;450:12;394:70;532:2;517:18;;511:25;483:5;;-1:-1:-1;;;;;;548:30:341;;545:50;;;591:1;588;581:12;545:50;614:22;;667:4;659:13;;655:27;-1:-1:-1;645:55:341;;696:1;693;686:12;645:55;723:9;;-1:-1:-1;;;;;744:30:341;;741:56;;;777:18;;:::i;:::-;826:2;820:9;918:2;880:17;;-1:-1:-1;;876:31:341;;;909:2;872:40;868:54;856:67;;-1:-1:-1;;;;;938:34:341;;974:22;;;935:62;932:88;;;1000:18;;:::i;:::-;1036:2;1029:22;1060;;;1101:15;;;1118:2;1097:24;1094:37;-1:-1:-1;1091:57:341;;;1144:1;1141;1134:12;1091:57;1193:6;1188:2;1184;1180:11;1175:2;1167:6;1163:15;1157:43;1246:1;1241:2;1232:6;1224;1220:19;1216:28;1209:39;1267:6;1257:16;;;;;146:1133;;;;;:::o;1284:418::-;1433:2;1422:9;1415:21;1396:4;1465:6;1459:13;1508:6;1503:2;1492:9;1488:18;1481:34;1567:6;1562:2;1554:6;1550:15;1545:2;1534:9;1530:18;1524:50;1623:1;1618:2;1609:6;1598:9;1594:22;1590:31;1583:42;1693:2;1686;1682:7;1677:2;1669:6;1665:15;1661:29;1650:9;1646:45;1642:54;1634:62;;;1284:418;;;;:::o;1707:297::-;1825:12;;1872:4;1861:16;;;1855:23;;1825:12;1890:16;;1887:111;;;1984:1;1980:6;1970;1964:4;1960:17;1957:1;1953:25;1949:38;1942:5;1938:50;1929:59;;1887:111;;1707:297;;;:::o;2417:184::-;685:15505:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561000f575f5ffd5b5060043610610132575f3560e01c80635ddb9b5b116100b4578063848189201161007957806384818920146102f3578063a2c902f514610306578063a2f2e24d1461030e578063cd83a72b14610321578063dd2ae1b914610334578063eb39e68f14610347575f5ffd5b80635ddb9b5b146102515780636141879e146102795780636738c40b1461028c57806368d6e081146102a15780637d1d1f5b146102e0575f5ffd5b806323c2a3cb116100fa57806323c2a3cb146101e357806326af6a3c146101f6578063538a37901461021657806354fd4d50146102295780635be872741461023e575f5ffd5b8063017d797414610136578063080b71501461015e578063121409ea1461017e57806318467434146101985780631a18746c146101b9575b5f5ffd5b610149610144366004612461565b610367565b60405190151581526020015b60405180910390f35b61017161016c36600461253c565b6104f8565b6040516101559190612587565b610186608e81565b60405160ff9091168152602001610155565b6101ab6101a63660046125be565b61050d565b604051908152602001610155565b6101cc6101c73660046125e6565b610570565b604080519215158352901515602083015201610155565b6101ab6101f1366004612634565b610591565b610209610204366004612666565b6105c7565b60405161015591906126db565b6101ab610224366004612708565b61067f565b6102316106ce565b6040516101559190612739565b61014961024c366004612666565b6106fe565b61026461025f36600461276e565b6107c9565b60405163ffffffff9091168152602001610155565b61026461028736600461276e565b6107ef565b61029f61029a36600461279e565b610815565b005b6102c87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610155565b6101716102ee366004612634565b6109fb565b6102c861030136600461276e565b610a7b565b610186607581565b6101ab61031c366004612857565b610aa4565b61014961032f366004612634565b610abb565b6101496103423660046128c3565b610af1565b61035a610355366004612634565b610b84565b604051610155919061297b565b5f5f6103738585610c49565b90505f61037f86610de6565b5f8181526004602081815260408084208a5163ffffffff16855282528084208151608081018352815481526001820154818501528251808401845260028301548152600383015481860152818401529381018054835181860281018601909452808452969750949593949093606086019383018282801561041d57602002820191905f5260205f20905b815481526020019060010190808311610409575b50505050508152505090505f8160600151905085518451146104525760405163512509d360e11b815260040160405180910390fd5b5f5b84518110156104e7575f6127108883815181106104735761047361298d565b602002602001015161ffff168484815181106104915761049161298d565b60200260200101516104a391906129b5565b6104ad91906129e0565b9050808683815181106104c2576104c261298d565b602002602001015110156104de575f96505050505050506104f1565b50600101610454565b5060019450505050505b9392505050565b60606105048383610c49565b90505b92915050565b604080517fd9f77a423768f4b0526fa60a7c732334516a93f1d228dce50ad804ea74ced36e602082015263ffffffff841691810191909152606081018290525f906080015b60405160208183030381529060405280519060200120905092915050565b5f5f61058486848787600162061a80610e49565b9150915094509492505050565b5f5f61059c84610de6565b5f90815260046020908152604080832063ffffffff8716845290915290206001015491505092915050565b6105cf611dfa565b5f6105d985610de6565b5f81815260056020908152604080832063ffffffff89168452825280832087845282529182902082516080810184528154818501908152600183015460608301528152600282018054855181860281018601909652808652959650909491938584019390929083018282801561066c57602002820191905f5260205f20905b815481526020019060010190808311610658575b5050505050815250509150509392505050565b5f60758260405160200161069391906126db565b60408051601f19818403018152908290526106b192916020016129f3565b604051602081830303815290604052805190602001209050919050565b60606106f97f0000000000000000000000000000000000000000000000000000000000000000610f11565b905090565b5f5f61070985610de6565b5f81815260056020908152604080832063ffffffff8916845282528083208784528252808320815160808101835281548184019081526001830154606083015281526002820180548451818702810187019095528085529697509495909491938581019392919083018282801561079d57602002820191905f5260205f20905b815481526020019060010190808311610789575b50505091909252505081515191925050158015906107bf575080516020015115155b9695505050505050565b5f5f6107d483610de6565b5f9081526003602052604090205463ffffffff169392505050565b5f5f6107fa83610de6565b5f9081526002602052604090205463ffffffff169392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461085e5760405163030c1b6b60e11b815260040160405180910390fd5b5f6108766108713687900387018761276e565b610de6565b5f8181526003602052604090205490915063ffffffff908116908516116108b057604051632f20889f60e01b815260040160405180910390fd5b5f81815260046020818152604080842063ffffffff8916855282529283902086518155818701516001820155928601518051600285015581015160038401556060860151805187949361090893908501920190611e24565b5050505f818152600360209081526040909120805463ffffffff191663ffffffff871617905561093a90830183612a1c565b5f8281526001602090815260409182902080546001600160a01b0319166001600160a01b03949094169390931790925561097991908401908401612a35565b5f828152600260209081526040808320805463ffffffff191663ffffffff958616179055600682528083209388168352929052819020805460ff19166001179055517f93e6bea1c9b5dce4a5c07b00261e956df2a4a253d9ab6ca070ca2037d72ada9e906109ec90879087908790612a4e565b60405180910390a15050505050565b60605f610a0784610de6565b5f81815260046020818152604080842063ffffffff891685528252928390209091018054835181840281018401909452808452939450919290830182828015610a6d57602002820191905f5260205f20905b815481526020019060010190808311610a59575b505050505091505092915050565b5f5f610a8683610de6565b5f908152600160205260409020546001600160a01b03169392505050565b5f608e838360405160200161055293929190612a9a565b5f5f610ac684610de6565b5f90815260066020908152604080832063ffffffff8716845290915290205460ff1691505092915050565b5f5f610afd8585610c49565b90508251815114610b215760405163512509d360e11b815260040160405180910390fd5b5f5b8151811015610b7857838181518110610b3e57610b3e61298d565b6020026020010151828281518110610b5857610b5861298d565b60200260200101511015610b70575f925050506104f1565b600101610b23565b50600195945050505050565b610b8c611e6d565b5f610b9684610de6565b5f81815260046020818152604080842063ffffffff8916855282529283902083516080810185528154815260018201548184015284518086018652600283015481526003830154818501528186015292810180548551818502810185019096528086529596509294909360608601939092909190830182828015610c3757602002820191905f5260205f20905b815481526020019060010190808311610c23575b50505050508152505091505092915050565b6060610c53611e9f565b610c5c84610de6565b8082528351610c6b9190610f4e565b80515f908152600460208181526040808420875163ffffffff1685528252928390208351608081018552815481526001820154818401528451808601865260028301548152600383015481850152818601529281018054855181850281018501909652808652939491936060860193830182828015610d0757602002820191905f5260205f20905b815481526020019060010190808311610cf3575b505050919092525050506020820181905260600151516001600160401b03811115610d3457610d34611fcd565b604051908082528060200260200182016040528015610d5d578160200160208202803683370190505b5060408201525f5b81602001516060015151811015610dc1578160200151606001518181518110610d9057610d9061298d565b602002602001015182604001518281518110610dae57610dae61298d565b6020908102919091010152600101610d65565b50610dcc8184611088565b6060820152610ddb81846111e5565b604001519392505050565b5f815f0151826020015163ffffffff16604051602001610e3192919060609290921b6bffffffffffffffffffffffff1916825260a01b6001600160a01b031916601482015260200190565b60405160208183030381529060405261050790612ac1565b5f5f5f610e5589611264565b90505f610e648a89898c6112ee565b90505f610e7b610e748a846113a2565b8b9061140a565b90505f610ebd610eb684610eb06040805180820182525f80825260209182015281518083019092526001825260029082015290565b906113a2565b859061140a565b90508715610ee257610ed982610ed161147e565b838c8b61153e565b96509450610f02565b610ef582610eee61147e565b838c611752565b95508515610f0257600194505b50505050965096945050505050565b60605f610f1d83611989565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f8281526002602052604090205463ffffffff16801580610f7e5750610f748183612ae4565b63ffffffff164211155b610f9b5760405163640fcd6b60e11b815260040160405180910390fd5b5f83815260066020908152604080832063ffffffff8616845290915290205460ff16610fda57604051630cad17b760e31b815260040160405180910390fd5b60405163193877e160e21b815263ffffffff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906364e1df8490602401602060405180830381865afa158015611042573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110669190612b00565b61108357604051631b14174b60e01b815260040160405180910390fd5b505050565b6040805180820182525f80825260209182018190528251808401909352808352908201819052805b8360800151518110156111dd575f846080015182815181106110d4576110d461298d565b602002602001015190505f82111561111057805163ffffffff80851691161161111057604051631d8c4d1760e31b815260040160405180910390fd5b6020808701510151815163ffffffff161061113e576040516301fa53c760e11b815260040160405180910390fd5b855185515f9161114e91846119b0565b805190915061115e90869061140a565b94505f5b8160200151518110156111d0578760400151518110156111c857816020015181815181106111925761119261298d565b6020026020010151886040015182815181106111b0576111b061298d565b602002602001018181516111c49190612b1f565b9052505b600101611162565b50505191506001016110b0565b505092915050565b5f6112056111f68460600151611b27565b6020850151604001519061140a565b90505f611219835f0151846020015161050d565b90505f5f611231838587606001518860400151610570565b9150915081801561123f5750805b61125c5760405163439cc0cd60e01b815260040160405180910390fd5b505050505050565b604080518082019091525f80825260208201525f80806112915f516020612b595f395f51905f5286612b32565b90505b61129d81611bbd565b90935091505f516020612b595f395f51905f5282830983036112d5576040805180820190915290815260208101919091529392505050565b5f516020612b595f395f51905f52600182089050611294565b8251602080850151845180519083015186840151805190850151875188870151604080519889018e90528801989098526060870195909552608086019390935260a085019190915260c084015260e08301526101008201526101208101919091525f907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019061014001604051602081830303815290604052805190602001205f1c6113999190612b32565b95945050505050565b604080518082019091525f80825260208201526113bd611ee4565b835181526020808501519082015260408082018490525f908360608460076107d05a03fa905080806113eb57fe5b50806111dd57604051632319df1960e11b815260040160405180910390fd5b604080518082019091525f8082526020820152611425611f02565b835181526020808501518183015283516040808401919091529084015160608301525f908360808460066107d05a03fa9050808061145f57fe5b50806111dd5760405163d4b68fd760e01b815260040160405180910390fd5b611486611f20565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820182528681526020808201869052825180840190935286835282018490525f9182919061156f611f40565b5f5b6002811015611726575f6115868260066129b5565b905084826002811061159a5761159a61298d565b602002015151836115ab835f612b45565b600c81106115bb576115bb61298d565b60200201528482600281106115d2576115d261298d565b602002015160200151838260016115e99190612b45565b600c81106115f9576115f961298d565b60200201528382600281106116105761161061298d565b6020020151515183611623836002612b45565b600c81106116335761163361298d565b602002015283826002811061164a5761164a61298d565b6020020151516001602002015183611663836003612b45565b600c81106116735761167361298d565b602002015283826002811061168a5761168a61298d565b6020020151602001515f600281106116a4576116a461298d565b6020020151836116b5836004612b45565b600c81106116c5576116c561298d565b60200201528382600281106116dc576116dc61298d565b6020020151602001516001600281106116f7576116f761298d565b602002015183611708836005612b45565b600c81106117185761171861298d565b602002015250600101611571565b5061172f611f5f565b5f6020826101808560088cfa9151919c9115159b50909950505050505050505050565b6040805180820182528581526020808201859052825180840190935285835282018390525f91611780611f40565b5f5b6002811015611937575f6117978260066129b5565b90508482600281106117ab576117ab61298d565b602002015151836117bc835f612b45565b600c81106117cc576117cc61298d565b60200201528482600281106117e3576117e361298d565b602002015160200151838260016117fa9190612b45565b600c811061180a5761180a61298d565b60200201528382600281106118215761182161298d565b6020020151515183611834836002612b45565b600c81106118445761184461298d565b602002015283826002811061185b5761185b61298d565b6020020151516001602002015183611874836003612b45565b600c81106118845761188461298d565b602002015283826002811061189b5761189b61298d565b6020020151602001515f600281106118b5576118b561298d565b6020020151836118c6836004612b45565b600c81106118d6576118d661298d565b60200201528382600281106118ed576118ed61298d565b6020020151602001516001600281106119085761190861298d565b602002015183611919836005612b45565b600c81106119295761192961298d565b602002015250600101611782565b50611940611f5f565b5f6020826101808560086107d05a03fa9050808061195a57fe5b5080611979576040516324ccc79360e21b815260040160405180910390fd5b5051151598975050505050505050565b5f60ff8216601f81111561050757604051632cd44ac360e21b815260040160405180910390fd5b6119b8611dfa565b5f84815260056020908152604080832063ffffffff8088168552908352818420865190911684528252808320815160808101835281548184019081526001830154606083015281526002820180548451818702810187019095528085529194929385840193909290830182828015611a4d57602002820191905f5260205f20905b815481526020019060010190808311611a39575b5050509190925250508151519192505f911515905080611a71575081516020015115155b905080611b1a575f611a918787875f015188604001518960200151611c39565b905080611ab15760405163439cc0cd60e01b815260040160405180910390fd5b6040808601515f8981526005602090815283822063ffffffff808c1684529082528483208a5190911683528152929020815180518255830151600182015582820151805192939192611b099260028501920190611e24565b509050508460400151935050611b1e565b8192505b50509392505050565b604080518082019091525f80825260208201528151158015611b4b57506020820151155b15611b68575050604080518082019091525f808252602082015290565b6040518060400160405280835f015181526020015f516020612b595f395f51905f528460200151611b999190612b32565b611bb0905f516020612b595f395f51905f52612b1f565b905292915050565b919050565b5f80805f516020612b595f395f51905f5260035f516020612b595f395f51905f52865f516020612b595f395f51905f52888909090890505f611c2d827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f525f516020612b595f395f51905f52611c87565b91959194509092505050565b5f5f611c448461067f565b5f88815260046020908152604080832063ffffffff808c168552925290912054919250611c7b908590839085908a811690611d0016565b98975050505050505050565b5f5f611c91611f5f565b611c99611f7d565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280611cd657fe5b5082611cf55760405163d51edae360e01b815260040160405180910390fd5b505195945050505050565b5f83611d1f576040516329e7276760e11b815260040160405180910390fd5b83611d2b868585611d35565b1495945050505050565b5f83515f03611d455750816104f1565b60208451611d539190612b32565b15611d71576040516313717da960e21b815260040160405180910390fd5b8260205b85518111611dd257611d88600285612b32565b5f03611da957815f528086015160205260405f209150600284049350611dc0565b808601515f528160205260405f2091506002840493505b611dcb602082612b45565b9050611d75565b508215611df2576040516363df817160e01b815260040160405180910390fd5b949350505050565b604080516080810182525f91810182815260608201929092529081905b8152602001606081525090565b828054828255905f5260205f20908101928215611e5d579160200282015b82811115611e5d578251825591602001919060010190611e42565b50611e69929150611f9b565b5090565b60405180608001604052805f81526020015f8152602001611e1760405180604001604052805f81526020015f81525090565b60405180608001604052805f8152602001611eb8611e6d565b815260200160608152602001611edf60405180604001604052805f81526020015f81525090565b905290565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280611f33611faf565b8152602001611edf611faf565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b5b80821115611e69575f8155600101611f9c565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b038111828210171561200357612003611fcd565b60405290565b60405160a081016001600160401b038111828210171561200357612003611fcd565b604051606081016001600160401b038111828210171561200357612003611fcd565b604051608081016001600160401b038111828210171561200357612003611fcd565b604051601f8201601f191681016001600160401b038111828210171561209757612097611fcd565b604052919050565b80356001600160a01b0381168114611bb8575f5ffd5b803563ffffffff81168114611bb8575f5ffd5b5f604082840312156120d8575f5ffd5b6120e0611fe1565b90506120eb8261209f565b81526120f9602083016120b5565b602082015292915050565b5f60408284031215612114575f5ffd5b61211c611fe1565b823581526020928301359281019290925250919050565b5f82601f830112612142575f5ffd5b61214a611fe1565b80604084018581111561215b575f5ffd5b845b8181101561217557803584526020938401930161215d565b509095945050505050565b5f60808284031215612190575f5ffd5b612198611fe1565b90506121a48383612133565b81526120f98360408401612133565b5f6001600160401b038211156121cb576121cb611fcd565b5060051b60200190565b5f82601f8301126121e4575f5ffd5b81356121f76121f2826121b3565b61206f565b8082825260208201915060208360051b860101925085831115612218575f5ffd5b602085015b8381101561223557803583526020928301920161221d565b5095945050505050565b5f6060828403121561224f575f5ffd5b612257611fe1565b90506122638383612104565b815260408201356001600160401b0381111561227d575f5ffd5b612289848285016121d5565b60208301525092915050565b5f61012082840312156122a6575f5ffd5b6122ae612009565b90506122b9826120b5565b8152602082810135908201526122d28360408401612104565b60408201526122e48360808401612180565b60608201526101008201356001600160401b03811115612302575f5ffd5b8201601f81018413612312575f5ffd5b80356123206121f2826121b3565b8082825260208201915060208360051b850101925086831115612341575f5ffd5b602084015b838110156124515780356001600160401b03811115612363575f5ffd5b85016060818a03601f19011215612378575f5ffd5b61238061202b565b61238c602083016120b5565b815260408201356001600160401b038111156123a6575f5ffd5b82016020810190603f018b136123ba575f5ffd5b80356001600160401b038111156123d3576123d3611fcd565b6123e6601f8201601f191660200161206f565b8181528c60208385010111156123fa575f5ffd5b816020840160208301375f6020838301015280602085015250505060608201356001600160401b0381111561242d575f5ffd5b61243c8b60208386010161223f565b60408301525084525060209283019201612346565b5060808501525091949350505050565b5f5f5f60808486031215612473575f5ffd5b61247d85856120c8565b925060408401356001600160401b03811115612497575f5ffd5b6124a386828701612295565b92505060608401356001600160401b038111156124be575f5ffd5b8401601f810186136124ce575f5ffd5b80356124dc6121f2826121b3565b8082825260208201915060208360051b8501019250888311156124fd575f5ffd5b6020840193505b8284101561252e57833561ffff8116811461251d575f5ffd5b825260209384019390910190612504565b809450505050509250925092565b5f5f6060838503121561254d575f5ffd5b61255784846120c8565b915060408301356001600160401b03811115612571575f5ffd5b61257d85828601612295565b9150509250929050565b602080825282518282018190525f918401906040840190835b818110156121755783518352602093840193909201916001016125a0565b5f5f604083850312156125cf575f5ffd5b6125d8836120b5565b946020939093013593505050565b5f5f5f5f61012085870312156125fa575f5ffd5b8435935061260b8660208701612104565b925061261a8660608701612180565b91506126298660e08701612104565b905092959194509250565b5f5f60608385031215612645575f5ffd5b61264f84846120c8565b915061265d604084016120b5565b90509250929050565b5f5f5f60808486031215612678575f5ffd5b61268285856120c8565b9250612690604085016120b5565b929592945050506060919091013590565b5f8151808452602084019350602083015f5b828110156126d15781518652602095860195909101906001016126b3565b5093949350505050565b60208082528251805183830152015160408201525f6020830151606080840152611df260808401826126a1565b5f60208284031215612718575f5ffd5b81356001600160401b0381111561272d575f5ffd5b611df28482850161223f565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f6040828403121561277e575f5ffd5b61050483836120c8565b5f60408284031215612798575f5ffd5b50919050565b5f5f5f5f60c085870312156127b1575f5ffd5b6127bb8686612788565b93506127c9604086016120b5565b925060608501356001600160401b038111156127e3575f5ffd5b850160a081880312156127f4575f5ffd5b6127fc61204d565b81358152602080830135908201526128178860408401612104565b604082015260808201356001600160401b03811115612834575f5ffd5b612840898285016121d5565b606083015250925061262990508660808701612788565b5f5f60208385031215612868575f5ffd5b82356001600160401b0381111561287d575f5ffd5b8301601f8101851361288d575f5ffd5b80356001600160401b038111156128a2575f5ffd5b8560208284010111156128b3575f5ffd5b6020919091019590945092505050565b5f5f5f608084860312156128d5575f5ffd5b6128df85856120c8565b925060408401356001600160401b038111156128f9575f5ffd5b61290586828701612295565b92505060608401356001600160401b03811115612920575f5ffd5b61292c868287016121d5565b9150509250925092565b80518252602081015160208301525f6040820151612961604085018280518252602090810151910152565b50606082015160a06080850152611df260a08501826126a1565b602081525f6105046020830184612936565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610507576105076129a1565b634e487b7160e01b5f52601260045260245ffd5b5f826129ee576129ee6129cc565b500490565b60ff60f81b8360f81b1681525f82518060208501600185015e5f92016001019182525092915050565b5f60208284031215612a2c575f5ffd5b6105048261209f565b5f60208284031215612a45575f5ffd5b610504826120b5565b6001600160a01b03612a5f8561209f565b16815263ffffffff612a73602086016120b5565b16602082015263ffffffff83166040820152608060608201525f6113996080830184612936565b60f884901b6001600160f81b0319168152818360018301375f910160010190815292915050565b80516020808301519190811015612798575f1960209190910360031b1b16919050565b63ffffffff8181168382160190811115610507576105076129a1565b5f60208284031215612b10575f5ffd5b815180151581146104f1575f5ffd5b81810381811115610507576105076129a1565b5f82612b4057612b406129cc565b500690565b80820180821115610507576105076129a156fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a26469706673582212207db5218ea602fe4055ee92b6fa3a433a57d363164f08f843d254f0ebb2345ab464736f6c634300081b0033",
    "sourceMap": "685:15505:184:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3361:1120;;;;;;:::i;:::-;;:::i;:::-;;;8922:14:341;;8915:22;8897:41;;8885:2;8870:18;3361:1120:184;;;;;;;;3078:232;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1867:53:180:-;;1916:4;1867:53;;;;;10230:4:341;10218:17;;;10200:36;;10188:2;10173:18;1867:53:180;10058:184:341;15968:220:184;;;;;;:::i;:::-;;:::i;:::-;;;10696:25:341;;;10684:2;10669:18;15968:220:184;10550:177:341;14156:480:184;;;;;;:::i;:::-;;:::i;:::-;;;;11500:14:341;;11493:22;11475:41;;11559:14;;11552:22;11547:2;11532:18;;11525:50;11448:18;14156:480:184;11313:268:341;13824:281:184;;;;;;:::i;:::-;;:::i;14687:336::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3037:250:180:-;;;;;;:::i;:::-;;:::i;1031:106:182:-;;;:::i;:::-;;;;;;;:::i;15074:501:184:-;;;;;;:::i;:::-;;:::i;12872:229::-;;;;;;:::i;:::-;;:::i;:::-;;;14754:10:341;14742:23;;;14724:42;;14712:2;14697:18;12872:229:184;14580:192:341;12598:224:184;;;;;;:::i;:::-;;:::i;2027:1000::-;;;;;;:::i;:::-;;:::i;:::-;;930:59:185;;;;;;;;-1:-1:-1;;;;;16423:32:341;;;16405:51;;16393:2;16378:18;930:59:185;16228:234:341;13479:294:184;;;;;;:::i;:::-;;:::i;12331:217::-;;;;;;:::i;:::-;;:::i;1218:52:180:-;;1266:4;1218:52;;4362:212;;;;;;:::i;:::-;;:::i;13151:278:184:-;;;;;;:::i;:::-;;:::i;4532:631::-;;;;;;:::i;:::-;;:::i;15626:290::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3361:1120::-;3556:4;3572:40;3615:37;3634:11;3647:4;3615:18;:37::i;:::-;3572:80;;3663:22;3688:17;:11;:15;:17::i;:::-;3715:43;3761:33;;;:17;:33;;;;;;;;3795:23;;3761:58;;;;;;;;;3715:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3663:42;;-1:-1:-1;3715:43:184;;:104;;3761:58;;3715:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3829:28;3860:15;:28;;;3829:59;;3941:30;:37;3907:23;:30;:71;3899:103;;;;-1:-1:-1;;;3899:103:184;;;;;;;;;;;;4018:9;4013:440;4037:23;:30;4033:1;:34;4013:440;;;4249:17;767:6:185;4287:30:184;4318:1;4287:33;;;;;;;;:::i;:::-;;;;;;;4270:50;;:11;4282:1;4270:14;;;;;;;;:::i;:::-;;;;;;;:50;;;;:::i;:::-;4269:70;;;;:::i;:::-;4249:90;;4387:9;4358:23;4382:1;4358:26;;;;;;;;:::i;:::-;;;;;;;:38;4354:89;;;4423:5;4416:12;;;;;;;;;;4354:89;-1:-1:-1;4069:3:184;;4013:440;;;;4470:4;4463:11;;;;;;3361:1120;;;;;;:::o;3078:232::-;3207:40;3266:37;3285:11;3298:4;3266:18;:37::i;:::-;3259:44;;3078:232;;;;;:::o;15968:220::-;16109:71;;;447:76:185;16109:71:184;;;19656:25:341;19729:10;19717:23;;19697:18;;;19690:51;;;;19757:18;;;19750:34;;;16073:7:184;;19629:18:341;;16109:71:184;;;;;;;;;;;;;16099:82;;;;;;16092:89;;15968:220;;;;:::o;14156:480::-;14358:22;14382:19;14420:209;14472:7;14493:9;14516;14539:5;14558:4;654:7:185;14420:38:184;:209::i;:::-;14413:216;;;;14156:480;;;;;;;:::o;13824:281::-;13954:7;13973:22;13998:17;:11;:15;:17::i;:::-;14032:33;;;;:17;:33;;;;;;;;:53;;;;;;;;;;:66;;;;-1:-1:-1;;13824:281:184;;;;:::o;14687:336::-;14856:24;;:::i;:::-;14892:22;14917:17;:11;:15;:17::i;:::-;14951:30;;;;:14;:30;;;;;;;;:50;;;;;;;;;;:65;;;;;;;;;14944:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14892:42;;-1:-1:-1;14944:72:184;;14951:65;;14944:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14687:336;;;;;:::o;3037:250:180:-;3176:7;1266:4;3265:12;3254:24;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3254:24:180;;;;;;;;;;3212:67;;;3254:24;3212:67;;:::i;:::-;;;;;;;;;;;;;3202:78;;;;;;3195:85;;3037:250;;;:::o;1031:106:182:-;1079:13;1111:19;:8;:17;:19::i;:::-;1104:26;;1031:106;:::o;15074:501:184:-;15236:4;15252:22;15277:17;:11;:15;:17::i;:::-;15304:37;15344:30;;;:14;:30;;;;;;;;:50;;;;;;;;;;:65;;;;;;;;15304:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15252:42;;-1:-1:-1;15304:37:184;;:105;;15344:65;;15304:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;15304:105:184;;;;-1:-1:-1;;15512:19:184;;:21;15304:105;;-1:-1:-1;;15512:26:184;;;;:56;;-1:-1:-1;15542:19:184;;:21;;;:26;;15512:56;15505:63;15074:501;-1:-1:-1;;;;;;15074:501:184:o;12872:229::-;12975:6;12993:22;13018:17;:11;:15;:17::i;:::-;13052:42;;;;:26;:42;;;;;;;;;12872:229;-1:-1:-1;;;12872:229:184:o;12598:224::-;12702:6;12720:22;12745:17;:11;:15;:17::i;:::-;12779:36;;;;:20;:36;;;;;;;;;12598:224;-1:-1:-1;;;12598:224:184:o;2027:1000::-;1300:10;-1:-1:-1;;;;;1322:20:184;1300:43;;1292:72;;;;-1:-1:-1;;;1292:72:184;;;;;;;;;;;;2282:22:::1;2307:17;:15;;::::0;;::::1;::::0;::::1;:11:::0;:15:::1;:::i;:::-;;:17::i;:::-;2454:42;::::0;;;:26:::1;:42;::::0;;;;;2282;;-1:-1:-1;2454:42:184::1;::::0;;::::1;2433:63:::0;;::::1;;2425:92;;;;-1:-1:-1::0;;;2425:92:184::1;;;;;;;;;;;;2567:33;::::0;;;:17:::1;:33;::::0;;;;;;;:53:::1;::::0;::::1;::::0;;;;;;;;:71;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;2623:15;;2567:53;:71:::1;::::0;;;::::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;;;2648:42:184::1;::::0;;;:26:::1;:42;::::0;;;;;;;:63;;-1:-1:-1;;2648:63:184::1;;::::0;::::1;;::::0;;2758:23:::1;::::0;;::::1;::::0;::::1;:::i;:::-;2721:34;::::0;;;:18:::1;:34;::::0;;;;;;;;:60;;-1:-1:-1;;;;;;2721:60:184::1;-1:-1:-1::0;;;;;2721:60:184;;;::::1;::::0;;;::::1;::::0;;;2830:36:::1;::::0;;;;;;::::1;;:::i;:::-;2791;::::0;;;:20:::1;:36;::::0;;;;;;;:75;;-1:-1:-1;;2791:75:184::1;;::::0;;::::1;;::::0;;2876:23:::1;:39:::0;;;;;:59;;::::1;::::0;;;;;;;;:66;;-1:-1:-1;;2876:66:184::1;-1:-1:-1::0;2876:66:184::1;::::0;;2958:62;::::1;::::0;::::1;::::0;2971:11;;2876:59;;3004:15;;2958:62:::1;:::i;:::-;;;;;;;;2272:755;2027:1000:::0;;;;:::o;13479:294::-;13613:16;13641:22;13666:17;:11;:15;:17::i;:::-;13700:33;;;;:17;:33;;;;;;;;:53;;;;;;;;;;;:66;;;13693:73;;;;;;;;;;;;;;;;;13641:42;;-1:-1:-1;13693:73:184;;;;;13700:66;13693:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13479:294;;;;:::o;12331:217::-;12429:7;12448:22;12473:17;:11;:15;:17::i;:::-;12507:34;;;;:18;:34;;;;;;-1:-1:-1;;;;;12507:34:184;;12331:217;-1:-1:-1;;;12331:217:184:o;4362:212:180:-;4468:7;1916:4;4547:18;;4504:62;;;;;;;;;;:::i;13151:278:184:-;13288:4;13304:22;13329:17;:11;:15;:17::i;:::-;13363:39;;;;:23;:39;;;;;;;;:59;;;;;;;;;;;;;;-1:-1:-1;;13151:278:184;;;;:::o;4532:631::-;4722:4;4738:40;4781:37;4800:11;4813:4;4781:18;:37::i;:::-;4738:80;;4871:27;:34;4837:23;:30;:68;4829:100;;;;-1:-1:-1;;;4829:100:184;;;;;;;;;;;;4945:9;4940:195;4964:23;:30;4960:1;:34;4940:195;;;5048:27;5076:1;5048:30;;;;;;;;:::i;:::-;;;;;;;5019:23;5043:1;5019:26;;;;;;;;:::i;:::-;;;;;;;:59;5015:110;;;5105:5;5098:12;;;;;;5015:110;4996:3;;4940:195;;;-1:-1:-1;5152:4:184;;4532:631;-1:-1:-1;;;;;4532:631:184:o;15626:290::-;15758:27;;:::i;:::-;15797:22;15822:17;:11;:15;:17::i;:::-;15856:33;;;;:17;:33;;;;;;;;:53;;;;;;;;;;;15849:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15797:42;;-1:-1:-1;15849:60:184;;15856:53;;15849:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15626:290;;;;:::o;5541:916::-;5671:40;5723:30;;:::i;:::-;5784:17;:11;:15;:17::i;:::-;5763:38;;;5862:23;;5812:74;;5763:38;5812:29;:74::i;:::-;5936:18;;5918:37;;;;:17;:37;;;;;;;;5956:23;;5918:62;;;;;;;;;;5896:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5918:62;;5896:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5896:84:184;;;;-1:-1:-1;;;5896:19:184;;;:84;;;6096:32;;;:39;-1:-1:-1;;;;;6082:54:184;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6082:54:184;-1:-1:-1;6052:27:184;;;:84;6151:9;6146:163;6170:3;:19;;;:32;;;:39;6166:1;:43;6146:163;;;6263:3;:19;;;:32;;;6296:1;6263:35;;;;;;;;:::i;:::-;;;;;;;6230:3;:27;;;6258:1;6230:30;;;;;;;;:::i;:::-;;;;;;;;;;:68;6211:3;;6146:163;;;;6338:29;6357:3;6362:4;6338:18;:29::i;:::-;6319:16;;;:48;6378:27;6319:3;6400:4;6378:16;:27::i;:::-;6423;;;;5541:916;-1:-1:-1;;;5541:916:184:o;399:154:176:-;472:7;523:2;:6;;;538:2;:5;;;531:13;;506:39;;;;;;;;21791:2:341;21787:15;;;;-1:-1:-1;;21783:53:341;21771:66;;21893:3;21871:16;-1:-1:-1;;;;;;21867:59:341;21862:2;21853:12;;21846:81;21952:2;21943:12;;21616:345;506:39:176;;;;;;;;;;;;;498:48;;;:::i;1065:1076:172:-;1316:12;1330:22;1364:33;1400:23;1415:7;1400:14;:23::i;:::-;1364:59;;1433:13;1449:55;1465:7;1474:8;1484;1494:9;1449:15;:55::i;:::-;1433:71;-1:-1:-1;1551:27:172;1581:42;1596:26;:8;1433:71;1596:19;:26::i;:::-;1581:9;;:14;:42::i;:::-;1551:72;;1633:28;1664:56;1682:37;1713:5;1682:19;-1:-1:-1;;;;;;;;;;;;;;;;;2862:13:171;;;;;;;;2870:1;2862:13;;2873:1;2862:13;;;;;2783:99;1682:19:172;:30;;:37::i;:::-;1664:12;;:17;:56::i;:::-;1633:87;;1735:11;1731:404;;;1856:80;1874:6;1882:22;:20;:22::i;:::-;1906:7;1915:8;1925:10;1856:17;:80::i;:::-;1809:127;-1:-1:-1;1809:127:172;-1:-1:-1;1731:404:172;;;1977:64;1991:6;1999:22;:20;:22::i;:::-;2023:7;2032:8;1977:13;:64::i;:::-;1967:74;;2059:7;2055:70;;;2106:4;2086:24;;2055:70;1354:787;;;;1065:1076;;;;;;;;;:::o;2081:405:37:-;2140:13;2165:11;2179:16;2190:4;2179:10;:16::i;:::-;2303:14;;;2314:2;2303:14;;;;;;;;;2165:30;;-1:-1:-1;2283:17:37;;2303:14;;;;;;;;;-1:-1:-1;;;2393:16:37;;;-1:-1:-1;2438:4:37;2429:14;;2422:28;;;;-1:-1:-1;2393:16:37;2081:405::o;6676:707:184:-;6842:19;6864:36;;;:20;:36;;;;;;;;6918:17;;;:73;;-1:-1:-1;6958:33:184;6979:12;6958:18;:33;:::i;:::-;6939:52;;:15;:52;;6918:73;6910:102;;;;-1:-1:-1;;;6910:102:184;;;;;;;;;;;;7091:39;;;;:23;:39;;;;;;;;:59;;;;;;;;;;;;;7083:102;;;;-1:-1:-1;;;7083:102:184;;;;;;;;;;;;7296:63;;-1:-1:-1;;;7296:63:184;;14754:10:341;14742:23;;7296:63:184;;;14724:42:341;7296:20:184;-1:-1:-1;;;;;7296:43:184;;;;14697:18:341;;7296:63:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7288:88;;;;-1:-1:-1;;;7288:88:184;;;;;;;;;;;;6780:603;6676:707;;:::o;7656:1349::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;7846:19:184;;;;;;;;;;;;;;;;;-1:-1:-1;7918:1081:184;7942:4;:23;;;:30;7938:1;:34;7918:1081;;;7993:39;8035:4;:23;;;8059:1;8035:26;;;;;;;;:::i;:::-;;;;;;;7993:68;;8084:1;8080;:5;8076:211;;;8197:21;;:45;;;;;;;8189:83;;;;-1:-1:-1;;;8189:83:184;;;;;;;;;;;;8333:19;;;;;:32;;8309:21;;:56;;;8301:89;;;;-1:-1:-1;;;8301:89:184;;;;;;;;;;;;8494:18;;8514:23;;8405:37;;8461:86;;8539:7;8461:32;:86::i;:::-;8595:19;;8405:142;;-1:-1:-1;8577:38:184;;:12;;:17;:38::i;:::-;8562:53;-1:-1:-1;8702:9:184;8697:232;8721:12;:20;;;:27;8717:1;:31;8697:232;;;8781:3;:27;;;:34;8777:1;:38;8773:142;;;8873:12;:20;;;8894:1;8873:23;;;;;;;;:::i;:::-;;;;;;;8839:3;:27;;;8867:1;8839:30;;;;;;;;:::i;:::-;;;;;;:57;;;;;;;:::i;:::-;;;-1:-1:-1;8773:142:184;8750:3;;8697:232;;;-1:-1:-1;;8967:21:184;;-1:-1:-1;7974:3:184;;7918:1081;;;;7821:1184;7656:1349;;;;:::o;10606:716::-;10805:30;10838:67;10879:25;:3;:16;;;:23;:25::i;:::-;10838:19;;;;:35;;;;:40;:67::i;:::-;10805:100;;10996:22;11021:69;11048:4;:23;;;11073:4;:16;;;11021:26;:69::i;:::-;10996:94;;11102:22;11126:19;11161:77;11186:14;11202:9;11213:4;:8;;;11223:4;:14;;;11161:24;:77::i;:::-;11101:137;;;;11257:17;:35;;;;;11278:14;11257:35;11249:66;;;;-1:-1:-1;;;11249:66:184;;;;;;;;;;;;10708:614;;;;10606:716;;:::o;11698:464:171:-;-1:-1:-1;;;;;;;;;;;;;;;;;11791:12:171;;;11853:24;-1:-1:-1;;;;;;;;;;;11861:2:171;11853:24;:::i;:::-;11841:36;;11888:238;11927:13;11938:1;11927:10;:13::i;:::-;11915:25;;-1:-1:-1;11915:25:171;-1:-1:-1;;;;;;;;;;;;12004:1:171;12001;11994:24;11986:4;:32;11982:91;;12045:13;;;;;;;;;;;;;;;;;;;;11698:464;-1:-1:-1;;;11698:464:171:o;11982:91::-;-1:-1:-1;;;;;;;;;;;12101:1:171;12098;12091:24;12087:28;;11888:238;;2495:661:172;2840:10;;2872;;;;;2904;;:13;;2939;;;;2974:10;;;;:13;;3009;;;;3044:11;;3077;;;;2773:333;;;;;;23325:19:341;;;23360:12;;23353:28;;;;23397:12;;;23390:28;;;;23434:12;;;23427:28;;;;23471:13;;;23464:29;;;;23509:13;;;23502:29;23547:13;;;23540:29;23585:13;;;23578:29;23623:13;;;23616:29;;;;2692:13:172;;2062:102:171;;23661:13:341;;2773:333:172;;;;;;;;;;;;2746:374;;;;;;2725:405;;:424;;;;:::i;:::-;2717:432;2495:661;-1:-1:-1;;;;;2495:661:172:o;7788:550:171:-;-1:-1:-1;;;;;;;;;;;;;;;;;7888:23:171;;:::i;:::-;7932:3;;7921:14;;:8;7956:3;;;;7945:8;;;:14;7969:8;;;;:12;;;-1:-1:-1;;8156:1:171;8150:4;7921:14;8140:1;8133:4;8126:5;8122:16;8111:53;8100:64;-1:-1:-1;8100:64:171;;8234:47;8261:20;8270:9;8234:47;;8308:7;8300:31;;;;-1:-1:-1;;;8300:31:171;;;;;;;;;;;5563:585;-1:-1:-1;;;;;;;;;;;;;;;;;5666:23:171;;:::i;:::-;5710:4;;5699:15;;:8;5735:4;;;;5724:8;;;:15;5760:4;;5749:8;;;;:15;;;;5785:4;;;;5774:8;;;:15;-1:-1:-1;;5965:1:171;5959:4;5699:15;5949:1;5942:4;5935:5;5931:16;5920:53;5909:64;-1:-1:-1;5909:64:171;;6043:47;6070:20;6079:9;6043:47;;6118:7;6110:31;;;;-1:-1:-1;;;6110:31:171;;;;;;;;;;;4804:128;4853:14;;:::i;:::-;-1:-1:-1;4886:39:171;;;;;;;;4245:102;4886:39;;;;;;4395:102;4886:39;;;;;;;;;;;;;;4545:102;4886:39;;4695:102;4886:39;;;;;;;;;;;;;;;4804:128::o;9829:1112::-;10037:31;;;;;;;;;;;;;;;;;;10078;;;;;;;;;;;;;;;;10015:4;;;;10037:31;10120:24;;:::i;:::-;10160:9;10155:302;10179:1;10175;:5;10155:302;;;10201:9;10213:5;:1;10217;10213:5;:::i;:::-;10201:17;;10247:2;10250:1;10247:5;;;;;;;:::i;:::-;;;;;:7;10232:5;10238;:1;10247:7;10238:5;:::i;:::-;10232:12;;;;;;;:::i;:::-;;;;:22;10283:2;10286:1;10283:5;;;;;;;:::i;:::-;;;;;:7;;;10268:5;10274:1;10278;10274:5;;;;:::i;:::-;10268:12;;;;;;;:::i;:::-;;;;:22;10319:2;10322:1;10319:5;;;;;;;:::i;:::-;;;;;:7;:10;10304:5;10310;:1;10314;10310:5;:::i;:::-;10304:12;;;;;;;:::i;:::-;;;;:25;10358:2;10361:1;10358:5;;;;;;;:::i;:::-;;;;;:7;10366:1;10358:10;;;;10343:5;10349;:1;10353;10349:5;:::i;:::-;10343:12;;;;;;;:::i;:::-;;;;:25;10397:2;10400:1;10397:5;;;;;;;:::i;:::-;;;;;:7;;;10405:1;10397:10;;;;;;;:::i;:::-;;;;;10382:5;10388;:1;10392;10388:5;:::i;:::-;10382:12;;;;;;;:::i;:::-;;;;:25;10436:2;10439:1;10436:5;;;;;;;:::i;:::-;;;;;:7;;;10444:1;10436:10;;;;;;;:::i;:::-;;;;;10421:5;10427;:1;10431;10427:5;:::i;:::-;10421:12;;;;;;;:::i;:::-;;;;:25;-1:-1:-1;10182:3:171;;10155:302;;;;10467:21;;:::i;:::-;10498:12;10672:4;10667:3;10652:13;10645:5;10642:1;10630:10;10619:58;10922:6;;10608:69;;10922:11;;;;-1:-1:-1;10905:29:171;;-1:-1:-1;;;;;;;;;;9829:1112:171:o;8588:1024::-;8758:31;;;;;;;;;;;;;;;;;;8799;;;;;;;;;;;;;;;;8742:4;;8841:24;;:::i;:::-;8881:9;8876:302;8900:1;8896;:5;8876:302;;;8922:9;8934:5;:1;8938;8934:5;:::i;:::-;8922:17;;8968:2;8971:1;8968:5;;;;;;;:::i;:::-;;;;;:7;8953:5;8959;:1;8968:7;8959:5;:::i;:::-;8953:12;;;;;;;:::i;:::-;;;;:22;9004:2;9007:1;9004:5;;;;;;;:::i;:::-;;;;;:7;;;8989:5;8995:1;8999;8995:5;;;;:::i;:::-;8989:12;;;;;;;:::i;:::-;;;;:22;9040:2;9043:1;9040:5;;;;;;;:::i;:::-;;;;;:7;:10;9025:5;9031;:1;9035;9031:5;:::i;:::-;9025:12;;;;;;;:::i;:::-;;;;:25;9079:2;9082:1;9079:5;;;;;;;:::i;:::-;;;;;:7;9087:1;9079:10;;;;9064:5;9070;:1;9074;9070:5;:::i;:::-;9064:12;;;;;;;:::i;:::-;;;;:25;9118:2;9121:1;9118:5;;;;;;;:::i;:::-;;;;;:7;;;9126:1;9118:10;;;;;;;:::i;:::-;;;;;9103:5;9109;:1;9113;9109:5;:::i;:::-;9103:12;;;;;;;:::i;:::-;;;;:25;9157:2;9160:1;9157:5;;;;;;;:::i;:::-;;;;;:7;;;9165:1;9157:10;;;;;;;:::i;:::-;;;;;9142:5;9148;:1;9152;9148:5;:::i;:::-;9142:12;;;;;;;:::i;:::-;;;;:25;-1:-1:-1;8903:3:171;;8876:302;;;;9188:21;;:::i;:::-;9219:12;9399:4;9394:3;9379:13;9372:5;9369:1;9362:4;9355:5;9351:16;9340:64;9329:75;-1:-1:-1;9329:75:171;;9474:47;9501:20;9510:9;9474:47;;9549:7;9541:35;;;;-1:-1:-1;;;9541:35:171;;;;;;;;;;;;-1:-1:-1;9594:6:171;:11;;;;-1:-1:-1;;;;;;;;8588:1024:171:o;2558:245:37:-;2619:7;2691:4;2655:40;;2718:2;2709:11;;2705:69;;;2743:20;;-1:-1:-1;;;2743:20:37;;;;;;;;;;;9337:1092:184;9519:37;;:::i;:::-;9568:35;9606:30;;;:14;:30;;;;;;;;:50;;;;;;;;;;;;9657:21;;9606:73;;;;;;;;;;9568:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9606:73;;9568:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9568:111:184;;;;-1:-1:-1;;9797:17:184;;:19;9568:111;;-1:-1:-1;9776:17:184;;9797:24;;;-1:-1:-1;9797:24:184;:52;;-1:-1:-1;9825:17:184;;:19;;;:24;;9797:52;9776:74;;9866:12;9861:562;;9894:13;9910:232;9958:14;9990:18;10026:7;:21;;;10065:7;:20;;;10103:7;:25;;;9910:30;:232::i;:::-;9894:248;;10165:8;10157:39;;;;-1:-1:-1;;;10157:39:184;;;;;;;;;;;;10287:20;;;;;10211:30;;;;:14;:30;;;;;;;:50;;;;;;;;;;;;10262:21;;10211:73;;;;;;;;;;:96;;;;;;;;;;;;;;;;;;;10287:20;;10211:73;;:96;;;;;;;;;:::i;:::-;;;;;10336:7;:20;;;10321:35;;9880:487;9861:562;;;10402:10;10387:25;;9861:562;9558:871;;9337:1092;;;;;:::o;5187:309:171:-;-1:-1:-1;;;;;;;;;;;;;;;;;5340:3:171;;:8;:20;;;;-1:-1:-1;5352:3:171;;;;:8;5340:20;5336:154;;;-1:-1:-1;;5383:13:171;;;;;;;;;-1:-1:-1;5383:13:171;;;;;;;;5187:309::o;5336:154::-;5434:45;;;;;;;;5442:1;:3;;;5434:45;;;;-1:-1:-1;;;;;;;;;;;5461:1:171;:3;;;:16;;;;:::i;:::-;5447:31;;-1:-1:-1;;;;;;;;;;;5447:31:171;:::i;:::-;5434:45;;5427:52;5187:309;-1:-1:-1;;5187:309:171:o;5336:154::-;5187:309;;;:::o;12283:447::-;12351:7;;;-1:-1:-1;;;;;;;;;;;12482:1:171;-1:-1:-1;;;;;;;;;;;12466:1:171;-1:-1:-1;;;;;;;;;;;12450:1:171;12447;12440:24;12433:47;12426:70;12411:85;;12593:9;12605:91;12612:4;12618:65;-1:-1:-1;;;;;;;;;;;12605:6:171;:91::i;:::-;12715:4;;12593:103;;-1:-1:-1;12283:447:171;;-1:-1:-1;;;12283:447:171:o;11707:497:184:-;11948:13;11973:12;11988:39;12014:12;11988:25;:39::i;:::-;12037:12;12052:33;;;:17;:33;;;;;;;;:53;;;;;;;;;;;:74;11973:54;;-1:-1:-1;12143:54:184;;:5;;12052:74;;11973:54;;12143;;;;:27;:54;:::i;:::-;12136:61;11707:497;-1:-1:-1;;;;;;;;11707:497:184:o;12736:835:171:-;12827:14;12853:12;12875:24;;:::i;:::-;12909:23;;:::i;:::-;12953:4;12942:15;;;13025:8;;;:15;;;13109:8;;;:15;;;13193:8;;;:16;;;13219:8;;;:20;;;13249:8;;;:19;;;13357:6;13351:4;12942:15;13255:1;13334:4;13327:5;13323:16;13312:58;13301:69;-1:-1:-1;13301:69:171;;13440:47;13467:20;13476:9;13440:47;;13514:7;13506:32;;;;-1:-1:-1;;;13506:32:171;;;;;;;;;;;;-1:-1:-1;13555:9:171;;;-1:-1:-1;;;;;12736:835:171:o;2413:290:175:-;2568:4;2592;2584:40;;;;-1:-1:-1;;;2584:40:175;;;;;;;;;;;;2692:4;2641:47;2669:5;2676:4;2682:5;2641:27;:47::i;:::-;:55;;2413:290;-1:-1:-1;;;;;2413:290:175:o;3355:1247::-;3494:7;3517:5;:12;3533:1;3517:17;3513:59;;-1:-1:-1;3557:4:175;3550:11;;3513:59;3605:2;3590:5;:12;:17;;;;:::i;:::-;:22;3582:53;;;;-1:-1:-1;;;3582:53:175;;;;;;;;;;;;3669:4;3700:2;3683:771;3709:5;:12;3704:1;:17;3683:771;;3750:9;3758:1;3750:5;:9;:::i;:::-;3763:1;3750:14;3746:698;;3901:12;3895:4;3888:26;3965:1;3958:5;3954:13;3948:20;3942:4;3935:34;4022:4;4016;4006:21;3990:37;;4068:1;4061:5;4057:13;4048:22;;3746:698;;;4260:1;4253:5;4249:13;4243:20;4237:4;4230:34;4298:12;4292:4;4285:26;4364:4;4358;4348:21;4332:37;;4410:1;4403:5;4399:13;4390:22;;3746:698;3723:7;3728:2;3723:7;;:::i;:::-;;;3683:771;;;-1:-1:-1;4538:10:175;;4530:35;;;;-1:-1:-1;;;4530:35:175;;;;;;;;;;;;4583:12;3355:1247;-1:-1:-1;;;;3355:1247:175:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:127:341:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:257;218:4;212:11;;;250:17;;-1:-1:-1;;;;;282:34:341;;318:22;;;279:62;276:88;;;344:18;;:::i;:::-;380:4;373:24;146:257;:::o;408:253::-;480:2;474:9;522:4;510:17;;-1:-1:-1;;;;;542:34:341;;578:22;;;539:62;536:88;;;604:18;;:::i;666:253::-;738:2;732:9;780:4;768:17;;-1:-1:-1;;;;;800:34:341;;836:22;;;797:62;794:88;;;862:18;;:::i;924:253::-;996:2;990:9;1038:4;1026:17;;-1:-1:-1;;;;;1058:34:341;;1094:22;;;1055:62;1052:88;;;1120:18;;:::i;1182:275::-;1253:2;1247:9;1318:2;1299:13;;-1:-1:-1;;1295:27:341;1283:40;;-1:-1:-1;;;;;1338:34:341;;1374:22;;;1335:62;1332:88;;;1400:18;;:::i;:::-;1436:2;1429:22;1182:275;;-1:-1:-1;1182:275:341:o;1462:173::-;1530:20;;-1:-1:-1;;;;;1579:31:341;;1569:42;;1559:70;;1625:1;1622;1615:12;1640:163;1707:20;;1767:10;1756:22;;1746:33;;1736:61;;1793:1;1790;1783:12;1808:297;1866:5;1914:4;1902:9;1897:3;1893:19;1889:30;1886:50;;;1932:1;1929;1922:12;1886:50;1954:22;;:::i;:::-;1945:31;;1999:29;2018:9;1999:29;:::i;:::-;1992:5;1985:44;2061:37;2094:2;2083:9;2079:18;2061:37;:::i;:::-;2056:2;2049:5;2045:14;2038:61;1808:297;;;;:::o;2110:386::-;2164:5;2212:4;2200:9;2195:3;2191:19;2187:30;2184:50;;;2230:1;2227;2220:12;2184:50;2252:22;;:::i;:::-;2319:23;;2351:22;;2446:2;2431:18;;;2418:32;2466:14;;;2459:31;;;;-1:-1:-1;2243:31:341;2110:386;-1:-1:-1;2110:386:341:o;2501:542::-;2551:5;2604:3;2597:4;2589:6;2585:17;2581:27;2571:55;;2622:1;2619;2612:12;2571:55;2646:22;;:::i;:::-;2692:3;2730:2;2722:6;2718:15;2756:3;2748:6;2745:15;2742:35;;;2773:1;2770;2763:12;2742:35;2797:6;2812:200;2828:6;2823:3;2820:15;2812:200;;;2920:17;;2950:18;;2997:4;2988:14;;;;2845;2812:200;;;-1:-1:-1;3030:7:341;;2501:542;-1:-1:-1;;;;;2501:542:341:o;3048:320::-;3102:5;3150:4;3138:9;3133:3;3129:19;3125:30;3122:50;;;3168:1;3165;3158:12;3122:50;3190:22;;:::i;:::-;3181:31;;3235:40;3271:3;3260:9;3235:40;:::i;:::-;3228:5;3221:55;3310:51;3357:3;3350:4;3339:9;3335:20;3310:51;:::i;3373:207::-;3457:4;-1:-1:-1;;;;;3482:6:341;3479:30;3476:56;;;3512:18;;:::i;:::-;-1:-1:-1;3557:1:341;3553:14;3569:4;3549:25;;3373:207::o;3585:747::-;3639:5;3692:3;3685:4;3677:6;3673:17;3669:27;3659:55;;3710:1;3707;3700:12;3659:55;3750:6;3737:20;3777:88;3793:71;3857:6;3793:71;:::i;:::-;3777:88;:::i;:::-;3889:3;3913:6;3908:3;3901:19;3945:4;3940:3;3936:14;3929:21;;4006:4;3996:6;3993:1;3989:14;3981:6;3977:27;3973:38;3959:52;;4034:3;4026:6;4023:15;4020:35;;;4051:1;4048;4041:12;4020:35;4087:4;4079:6;4075:17;4101:200;4117:6;4112:3;4109:15;4101:200;;;4209:17;;4239:18;;4286:4;4277:14;;;;4134;4101:200;;;-1:-1:-1;4319:7:341;3585:747;-1:-1:-1;;;;;3585:747:341:o;4337:453::-;4401:5;4449:4;4437:9;4432:3;4428:19;4424:30;4421:50;;;4467:1;4464;4457:12;4421:50;4489:22;;:::i;:::-;4480:31;;4534:41;4571:3;4560:9;4534:41;:::i;:::-;4527:5;4520:56;4627:4;4616:9;4612:20;4599:34;-1:-1:-1;;;;;4648:6:341;4645:30;4642:50;;;4688:1;4685;4678:12;4642:50;4726:57;4779:3;4770:6;4759:9;4755:22;4726:57;:::i;:::-;4719:4;4712:5;4708:16;4701:83;;4337:453;;;;:::o;4795:2549::-;4858:5;4906:6;4894:9;4889:3;4885:19;4881:32;4878:52;;;4926:1;4923;4916:12;4878:52;4948:22;;:::i;:::-;4939:31;;4993:28;5011:9;4993:28;:::i;:::-;4979:43;;5095:2;5080:18;;;5067:32;5115:14;;;5108:31;5171:50;5217:3;5212:2;5197:18;;5171:50;:::i;:::-;5166:2;5159:5;5155:14;5148:74;5256:51;5303:3;5297;5286:9;5282:19;5256:51;:::i;:::-;5249:4;5242:5;5238:16;5231:77;5359:3;5348:9;5344:19;5331:33;-1:-1:-1;;;;;5379:6:341;5376:30;5373:50;;;5419:1;5416;5409:12;5373:50;5442:22;;5495:4;5487:13;;5483:23;-1:-1:-1;5473:51:341;;5520:1;5517;5510:12;5473:51;5560:2;5547:16;5583:88;5599:71;5663:6;5599:71;:::i;5583:88::-;5693:3;5717:6;5712:3;5705:19;5749:2;5744:3;5740:12;5733:19;;5804:2;5794:6;5791:1;5787:14;5783:2;5779:23;5775:32;5761:46;;5830:3;5822:6;5819:15;5816:35;;;5847:1;5844;5837:12;5816:35;5879:2;5875;5871:11;5891:1408;5907:6;5902:3;5899:15;5891:1408;;;5993:3;5980:17;-1:-1:-1;;;;;6016:11:341;6013:35;6010:55;;;6061:1;6058;6051:12;6010:55;6088:20;;6156:4;6132:12;;;-1:-1:-1;;6128:26:341;6124:37;6121:57;;;6174:1;6171;6164:12;6121:57;6206:22;;:::i;:::-;6257:30;6283:2;6279;6275:11;6257:30;:::i;:::-;6248:7;6241:47;6338:2;6334;6330:11;6317:25;-1:-1:-1;;;;;6361:8:341;6358:32;6355:52;;;6403:1;6400;6393:12;6355:52;6434:17;;6453:2;6430:26;;;6483:13;;6479:23;-1:-1:-1;6469:51:341;;6516:1;6513;6506:12;6469:51;6562:2;6549:16;-1:-1:-1;;;;;6584:8:341;6581:32;6578:58;;;6616:18;;:::i;:::-;6664:59;6713:2;6688:19;;-1:-1:-1;;6684:33:341;6719:2;6680:42;6664:59;:::i;:::-;6752:8;6743:7;6736:25;6808:3;6803:2;6792:8;6788:2;6784:17;6780:26;6777:35;6774:55;;;6825:1;6822;6815:12;6774:55;6886:8;6881:2;6877;6873:11;6868:2;6859:7;6855:16;6842:53;6948:1;6943:2;6932:8;6923:7;6919:22;6915:31;6908:42;6988:7;6983:2;6974:7;6970:16;6963:33;;;;7046:4;7042:2;7038:13;7025:27;-1:-1:-1;;;;;7071:8:341;7068:32;7065:52;;;7113:1;7110;7103:12;7065:52;7155:68;7219:3;7214:2;7203:8;7199:2;7195:17;7191:26;7155:68;:::i;:::-;7150:2;7137:16;;7130:94;-1:-1:-1;7237:20:341;;-1:-1:-1;7286:2:341;7277:12;;;;5924;5891:1408;;;-1:-1:-1;7326:3:341;7315:15;;7308:30;-1:-1:-1;7319:5:341;;4795:2549;-1:-1:-1;;;;4795:2549:341:o;7349:1403::-;7515:6;7523;7531;7584:3;7572:9;7563:7;7559:23;7555:33;7552:53;;;7601:1;7598;7591:12;7552:53;7624:49;7665:7;7654:9;7624:49;:::i;:::-;7614:59;;7724:2;7713:9;7709:18;7696:32;-1:-1:-1;;;;;7743:6:341;7740:30;7737:50;;;7783:1;7780;7773:12;7737:50;7806:67;7865:7;7856:6;7845:9;7841:22;7806:67;:::i;:::-;7796:77;;;7926:2;7915:9;7911:18;7898:32;-1:-1:-1;;;;;7945:8:341;7942:32;7939:52;;;7987:1;7984;7977:12;7939:52;8010:24;;8065:4;8057:13;;8053:27;-1:-1:-1;8043:55:341;;8094:1;8091;8084:12;8043:55;8134:2;8121:16;8157:88;8173:71;8237:6;8173:71;:::i;8157:88::-;8267:3;8291:6;8286:3;8279:19;8323:4;8318:3;8314:14;8307:21;;8380:4;8370:6;8367:1;8363:14;8359:2;8355:23;8351:34;8337:48;;8408:7;8400:6;8397:19;8394:39;;;8429:1;8426;8419:12;8394:39;8461:4;8457:2;8453:13;8442:24;;8475:247;8491:6;8486:3;8483:15;8475:247;;;8573:3;8560:17;8621:6;8614:5;8610:18;8603:5;8600:29;8590:57;;8643:1;8640;8633:12;8590:57;8660:18;;8707:4;8508:14;;;;8698;;;;8475:247;;;8741:5;8731:15;;;;;;7349:1403;;;;;:::o;8949:488::-;9082:6;9090;9143:2;9131:9;9122:7;9118:23;9114:32;9111:52;;;9159:1;9156;9149:12;9111:52;9182:49;9223:7;9212:9;9182:49;:::i;:::-;9172:59;;9282:2;9271:9;9267:18;9254:32;-1:-1:-1;;;;;9301:6:341;9298:30;9295:50;;;9341:1;9338;9331:12;9295:50;9364:67;9423:7;9414:6;9403:9;9399:22;9364:67;:::i;:::-;9354:77;;;8949:488;;;;;:::o;9442:611::-;9632:2;9644:21;;;9714:13;;9617:18;;;9736:22;;;9584:4;;9815:15;;;9789:2;9774:18;;;9584:4;9858:169;9872:6;9869:1;9866:13;9858:169;;;9933:13;;9921:26;;9976:2;10002:15;;;;9967:12;;;;9894:1;9887:9;9858:169;;10247:298;10314:6;10322;10375:2;10363:9;10354:7;10350:23;10346:32;10343:52;;;10391:1;10388;10381:12;10343:52;10414:28;10432:9;10414:28;:::i;:::-;10404:38;10511:2;10496:18;;;;10483:32;;-1:-1:-1;;;10247:298:341:o;10732:576::-;10896:6;10904;10912;10920;10973:3;10961:9;10952:7;10948:23;10944:33;10941:53;;;10990:1;10987;10980:12;10941:53;11035:23;;;-1:-1:-1;11101:54:341;11147:7;11142:2;11127:18;;11101:54;:::i;:::-;11091:64;;11174:54;11220:7;11215:2;11204:9;11200:18;11174:54;:::i;:::-;11164:64;;11247:55;11294:7;11288:3;11277:9;11273:19;11247:55;:::i;:::-;11237:65;;10732:576;;;;;;;:::o;11586:308::-;11683:6;11691;11744:2;11732:9;11723:7;11719:23;11715:32;11712:52;;;11760:1;11757;11750:12;11712:52;11783:49;11824:7;11813:9;11783:49;:::i;:::-;11773:59;;11851:37;11884:2;11873:9;11869:18;11851:37;:::i;:::-;11841:47;;11586:308;;;;;:::o;12081:423::-;12187:6;12195;12203;12256:3;12244:9;12235:7;12231:23;12227:33;12224:53;;;12273:1;12270;12263:12;12224:53;12296:49;12337:7;12326:9;12296:49;:::i;:::-;12286:59;;12364:37;12397:2;12386:9;12382:18;12364:37;:::i;:::-;12081:423;;12354:47;;-1:-1:-1;;;12470:2:341;12455:18;;;;12442:32;;12081:423::o;12662:420::-;12715:3;12753:5;12747:12;12780:6;12775:3;12768:19;12812:4;12807:3;12803:14;12796:21;;12851:4;12844:5;12840:16;12874:1;12884:173;12898:6;12895:1;12892:13;12884:173;;;12959:13;;12947:26;;13002:4;12993:14;;;;13030:17;;;;12920:1;12913:9;12884:173;;;-1:-1:-1;13073:3:341;;12662:420;-1:-1:-1;;;;12662:420:341:o;13087:453::-;13288:2;13270:21;;;13326:13;;12582:12;;13341:18;;;12570:25;12633:16;12627:23;12611:14;;;12604:47;13251:4;13407:2;13399:6;13395:15;13389:22;13449:4;13442;13431:9;13427:20;13420:34;13471:63;13529:3;13518:9;13514:19;13500:12;13471:63;:::i;13545:366::-;13640:6;13693:2;13681:9;13672:7;13668:23;13664:32;13661:52;;;13709:1;13706;13699:12;13661:52;13749:9;13736:23;-1:-1:-1;;;;;13774:6:341;13771:30;13768:50;;;13814:1;13811;13804:12;13768:50;13837:68;13897:7;13888:6;13877:9;13873:22;13837:68;:::i;13916:418::-;14065:2;14054:9;14047:21;14028:4;14097:6;14091:13;14140:6;14135:2;14124:9;14120:18;14113:34;14199:6;14194:2;14186:6;14182:15;14177:2;14166:9;14162:18;14156:50;14255:1;14250:2;14241:6;14230:9;14226:22;14222:31;14215:42;14325:2;14318;14314:7;14309:2;14301:6;14297:15;14293:29;14282:9;14278:45;14274:54;14266:62;;;13916:418;;;;:::o;14339:236::-;14428:6;14481:2;14469:9;14460:7;14456:23;14452:32;14449:52;;;14497:1;14494;14487:12;14449:52;14520:49;14561:7;14550:9;14520:49;:::i;14777:159::-;14841:5;14886:2;14877:6;14872:3;14868:16;14864:25;14861:45;;;14902:1;14899;14892:12;14861:45;-1:-1:-1;14924:6:341;14777:159;-1:-1:-1;14777:159:341:o;14941:1282::-;15135:6;15143;15151;15159;15212:3;15200:9;15191:7;15187:23;15183:33;15180:53;;;15229:1;15226;15219:12;15180:53;15252:58;15302:7;15291:9;15252:58;:::i;:::-;15242:68;;15329:37;15362:2;15351:9;15347:18;15329:37;:::i;:::-;15319:47;;15417:2;15406:9;15402:18;15389:32;-1:-1:-1;;;;;15436:6:341;15433:30;15430:50;;;15476:1;15473;15466:12;15430:50;15499:22;;15555:4;15537:16;;;15533:27;15530:47;;;15573:1;15570;15563:12;15530:47;15599:22;;:::i;:::-;15666:16;;15691:22;;15779:2;15771:11;;;15758:25;15799:14;;;15792:31;15855:47;15894:7;15889:2;15881:11;;15855:47;:::i;:::-;15850:2;15843:5;15839:14;15832:71;15949:4;15945:2;15941:13;15928:27;-1:-1:-1;;;;;15970:8:341;15967:32;15964:52;;;16012:1;16009;16002:12;15964:52;16048:56;16096:7;16085:8;16081:2;16077:17;16048:56;:::i;:::-;16043:2;16032:14;;16025:80;-1:-1:-1;16036:5:341;-1:-1:-1;16148:69:341;;-1:-1:-1;16209:7:341;16202:4;16187:20;;16148:69;:::i;16675:586::-;16745:6;16753;16806:2;16794:9;16785:7;16781:23;16777:32;16774:52;;;16822:1;16819;16812:12;16774:52;16862:9;16849:23;-1:-1:-1;;;;;16887:6:341;16884:30;16881:50;;;16927:1;16924;16917:12;16881:50;16950:22;;17003:4;16995:13;;16991:27;-1:-1:-1;16981:55:341;;17032:1;17029;17022:12;16981:55;17072:2;17059:16;-1:-1:-1;;;;;17090:6:341;17087:30;17084:50;;;17130:1;17127;17120:12;17084:50;17175:7;17170:2;17161:6;17157:2;17153:15;17149:24;17146:37;17143:57;;;17196:1;17193;17186:12;17143:57;17227:2;17219:11;;;;;17249:6;;-1:-1:-1;16675:586:341;-1:-1:-1;;;16675:586:341:o;17266:731::-;17433:6;17441;17449;17502:3;17490:9;17481:7;17477:23;17473:33;17470:53;;;17519:1;17516;17509:12;17470:53;17542:49;17583:7;17572:9;17542:49;:::i;:::-;17532:59;;17642:2;17631:9;17627:18;17614:32;-1:-1:-1;;;;;17661:6:341;17658:30;17655:50;;;17701:1;17698;17691:12;17655:50;17724:67;17783:7;17774:6;17763:9;17759:22;17724:67;:::i;:::-;17714:77;;;17844:2;17833:9;17829:18;17816:32;-1:-1:-1;;;;;17863:8:341;17860:32;17857:52;;;17905:1;17902;17895:12;17857:52;17928:63;17983:7;17972:8;17961:9;17957:24;17928:63;:::i;:::-;17918:73;;;17266:731;;;;;:::o;18002:451::-;18101:5;18095:12;18090:3;18083:25;18157:4;18150:5;18146:16;18140:23;18133:4;18128:3;18124:14;18117:47;18065:3;18210:4;18203:5;18199:16;18193:23;18225:55;18274:4;18269:3;18265:14;18251:12;12582;;12570:25;;12644:4;12633:16;;;12627:23;12611:14;;12604:47;12509:148;18225:55;;18328:4;18321:5;18317:16;18311:23;18366:4;18359;18354:3;18350:14;18343:28;18387:60;18441:4;18436:3;18432:14;18416;18387:60;:::i;18458:299::-;18665:2;18654:9;18647:21;18628:4;18685:66;18747:2;18736:9;18732:18;18724:6;18685:66;:::i;18762:127::-;18823:10;18818:3;18814:20;18811:1;18804:31;18854:4;18851:1;18844:15;18878:4;18875:1;18868:15;18894:127;18955:10;18950:3;18946:20;18943:1;18936:31;18986:4;18983:1;18976:15;19010:4;19007:1;19000:15;19026:168;19099:9;;;19130;;19147:15;;;19141:22;;19127:37;19117:71;;19168:18;;:::i;19199:127::-;19260:10;19255:3;19251:20;19248:1;19241:31;19291:4;19288:1;19281:15;19315:4;19312:1;19305:15;19331:120;19371:1;19397;19387:35;;19402:18;;:::i;:::-;-1:-1:-1;19436:9:341;;19331:120::o;19795:399::-;20009:3;20004;20000:13;19991:6;19986:3;19982:16;19978:36;19973:3;19966:49;19948:3;20044:6;20038:13;20098:6;20091:4;20083:6;20079:17;20075:1;20070:3;20066:11;20060:45;20168:1;20128:16;;20146:1;20124:24;20157:13;;;-1:-1:-1;20124:24:341;19795:399;-1:-1:-1;;19795:399:341:o;20199:186::-;20258:6;20311:2;20299:9;20290:7;20286:23;20282:32;20279:52;;;20327:1;20324;20317:12;20279:52;20350:29;20369:9;20350:29;:::i;20390:184::-;20448:6;20501:2;20489:9;20480:7;20476:23;20472:32;20469:52;;;20517:1;20514;20507:12;20469:52;20540:28;20558:9;20540:28;:::i;20579:658::-;-1:-1:-1;;;;;20906:26:341;20925:6;20906:26;:::i;:::-;20902:52;20891:9;20884:71;21035:10;20997:36;21027:4;21019:6;21015:17;20997:36;:::i;:::-;20993:53;20986:4;20975:9;20971:20;20964:83;21095:10;21087:6;21083:23;21078:2;21067:9;21063:18;21056:51;21143:3;21138:2;21127:9;21123:18;21116:31;20865:4;21164:67;21226:3;21215:9;21211:19;21203:6;21164:67;:::i;21242:369::-;21461:3;21439:16;;;-1:-1:-1;;;;;;21435:36:341;21423:49;;21515:6;21507;21503:1;21494:11;;21481:41;21405:3;21545:16;;21563:1;21541:24;21574:13;;;21541:24;21242:369;-1:-1:-1;;21242:369:341:o;21966:297::-;22084:12;;22131:4;22120:16;;;22114:23;;22084:12;22149:16;;22146:111;;;-1:-1:-1;;22223:4:341;22219:17;;;;22216:1;22212:25;22208:38;22197:50;;21966:297;-1:-1:-1;21966:297:341:o;22268:167::-;22363:10;22336:18;;;22356;;;22332:43;;22387:19;;22384:45;;;22409:18;;:::i;22440:277::-;22507:6;22560:2;22548:9;22539:7;22535:23;22531:32;22528:52;;;22576:1;22573;22566:12;22528:52;22608:9;22602:16;22661:5;22654:13;22647:21;22640:5;22637:32;22627:60;;22683:1;22680;22673:12;22722:128;22789:9;;;22810:11;;;22807:37;;;22824:18;;:::i;22855:112::-;22887:1;22913;22903:35;;22918:18;;:::i;:::-;-1:-1:-1;22952:9:341;;22855:112::o;23685:125::-;23750:9;;;23771:10;;;23768:36;;;23784:18;;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "98014": [
        {
          "start": 1749,
          "length": 32
        }
      ],
      "99280": [
        {
          "start": 678,
          "length": 32
        },
        {
          "start": 2080,
          "length": 32
        },
        {
          "start": 4085,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "OPERATOR_INFO_LEAF_SALT()": "a2c902f5",
    "OPERATOR_TABLE_LEAF_SALT()": "121409ea",
    "calculateCertificateDigest(uint32,bytes32)": "18467434",
    "calculateOperatorInfoLeaf(((uint256,uint256),uint256[]))": "538a3790",
    "calculateOperatorTableLeaf(bytes)": "a2f2e24d",
    "getNonsignerOperatorInfo((address,uint32),uint32,uint256)": "26af6a3c",
    "getOperatorCount((address,uint32),uint32)": "23c2a3cb",
    "getOperatorSetInfo((address,uint32),uint32)": "eb39e68f",
    "getOperatorSetOwner((address,uint32))": "84818920",
    "getTotalStakeWeights((address,uint32),uint32)": "7d1d1f5b",
    "isNonsignerCached((address,uint32),uint32,uint256)": "5be87274",
    "isReferenceTimestampSet((address,uint32),uint32)": "cd83a72b",
    "latestReferenceTimestamp((address,uint32))": "5ddb9b5b",
    "maxOperatorTableStaleness((address,uint32))": "6141879e",
    "operatorTableUpdater()": "68d6e081",
    "trySignatureVerification(bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256))": "1a18746c",
    "updateOperatorTable((address,uint32),uint32,(bytes32,uint256,(uint256,uint256),uint256[]),(address,uint32))": "6738c40b",
    "verifyCertificate((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]))": "080b7150",
    "verifyCertificateNominal((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint256[])": "dd2ae1b9",
    "verifyCertificateProportion((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint16[])": "017d7974",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOperatorTableUpdater\",\"name\":\"_operatorTableUpdater\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateStale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECAddFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECMulFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECPairingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpModFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperatorIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProofLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonSignerIndicesNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTableUpdater\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferenceTimestampDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RootDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TableUpdateStale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxStalenessPeriod\",\"type\":\"uint32\"}],\"name\":\"MaxStalenessPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OperatorSetOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"operatorInfoTreeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numOperators\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"aggregatePubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"totalWeights\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo\",\"name\":\"operatorSetInfo\",\"type\":\"tuple\"}],\"name\":\"TableUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_INFO_LEAF_SALT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_TABLE_LEAF_SALT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"calculateCertificateDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorInfo\",\"name\":\"operatorInfo\",\"type\":\"tuple\"}],\"name\":\"calculateOperatorInfoLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"operatorTableBytes\",\"type\":\"bytes\"}],\"name\":\"calculateOperatorTableLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"operatorIndex\",\"type\":\"uint256\"}],\"name\":\"getNonsignerOperatorInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"}],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"}],\"name\":\"getOperatorSetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"operatorInfoTreeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numOperators\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"aggregatePubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"totalWeights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"}],\"name\":\"getOperatorSetOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"}],\"name\":\"getTotalStakeWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"operatorIndex\",\"type\":\"uint256\"}],\"name\":\"isNonsignerCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"}],\"name\":\"isReferenceTimestampSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"}],\"name\":\"latestReferenceTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"}],\"name\":\"maxOperatorTableStaleness\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorTableUpdater\",\"outputs\":[{\"internalType\":\"contract IOperatorTableUpdater\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"aggPubkey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"trySignatureVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pairingSuccessful\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signatureValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"operatorInfoTreeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numOperators\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"aggregatePubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"totalWeights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo\",\"name\":\"operatorSetInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"maxStalenessPeriod\",\"type\":\"uint32\"}],\"internalType\":\"struct ICrossChainRegistryTypes.OperatorSetConfig\",\"name\":\"operatorSetConfig\",\"type\":\"tuple\"}],\"name\":\"updateOperatorTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"apk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operatorIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"operatorInfoProof\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorInfo\",\"name\":\"operatorInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]\",\"name\":\"nonSignerWitnesses\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBN254CertificateVerifierTypes.BN254Certificate\",\"name\":\"cert\",\"type\":\"tuple\"}],\"name\":\"verifyCertificate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totalSignedStakeWeights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"apk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operatorIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"operatorInfoProof\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorInfo\",\"name\":\"operatorInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]\",\"name\":\"nonSignerWitnesses\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBN254CertificateVerifierTypes.BN254Certificate\",\"name\":\"cert\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"totalStakeNominalThresholds\",\"type\":\"uint256[]\"}],\"name\":\"verifyCertificateNominal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"apk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operatorIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"operatorInfoProof\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IOperatorTableCalculatorTypes.BN254OperatorInfo\",\"name\":\"operatorInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]\",\"name\":\"nonSignerWitnesses\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBN254CertificateVerifierTypes.BN254Certificate\",\"name\":\"cert\",\"type\":\"tuple\"},{\"internalType\":\"uint16[]\",\"name\":\"totalStakeProportionThresholds\",\"type\":\"uint16[]\"}],\"name\":\"verifyCertificateProportion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract uses BN254 curves for signature verification and      caches operator information for efficient verification\",\"errors\":{\"ArrayLengthMismatch()\":[{\"details\":\"Error code: 0xa24a13a6\"}],\"CertificateStale()\":[{\"details\":\"Error code: 0xc81f9ad6\"}],\"ECAddFailed()\":[{\"details\":\"Thrown when the sum of two points of G1 fails\"}],\"ECMulFailed()\":[{\"details\":\"Thrown when the scalar multiplication of a point of G1 fails\"}],\"ECPairingFailed()\":[{\"details\":\"Thrown when the pairing check fails\"}],\"EmptyRoot()\":[{\"details\":\"Error code: 0x53ce4eceEmpty roots should never be valid. We prevent them to avoid issues like the Nomad bridge attack: <https://medium.com/nomad-xyz-blog/nomad-bridge-hack-root-cause-analysis-875ad2e5aacd>\"}],\"ExpModFailed()\":[{\"details\":\"Thrown when the exponentiation mod fails\"}],\"InvalidIndex()\":[{\"details\":\"Error code: 0x63df8171\"}],\"InvalidOperatorIndex()\":[{\"details\":\"Error code: 0x03f4a78eWe enforce that operator indices are within valid bounds to prevent out-of-bounds access in the merkle tree verification\"}],\"InvalidProofLength()\":[{\"details\":\"Error code: 0x4dc5f6a4\"}],\"NonSignerIndicesNotSorted()\":[{\"details\":\"Error code: 0xec6268b8We enforce strictly increasing order to prevent duplicates and ensure deterministic processing\"}],\"OnlyTableUpdater()\":[{\"details\":\"Error code: 0x061836d6We restrict table updates to only come from the `OperatorTableUpdater` contract\"}],\"ReferenceTimestampDoesNotExist()\":[{\"details\":\"Error code: 0x6568bdb8We require valid reference timestamps to ensure certificates reference existing operator table updates\"}],\"RootDisabled()\":[{\"details\":\"Error code: 0x1b14174bRoots are disabled by governance if a security issue is detected\"}],\"TableUpdateStale()\":[{\"details\":\"Error code: 0x2f20889fWe require newer reference timestamps to ensure that operator tables are append-only\"}],\"VerificationFailed()\":[{\"details\":\"Error code: 0x439cc0cd\"}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"calculateCertificateDigest(uint32,bytes32)\":{\"details\":\"This is a chain-agnostic digest, so it can be used to verify certificates across      multiple destination chains\",\"params\":{\"messageHash\":\"The message hash of the task\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"The digest\"}},\"calculateOperatorInfoLeaf(((uint256,uint256),uint256[]))\":{\"details\":\"The salt is used to prevent against second preimage attacks: attacks where an attacker can create a partial proof using an internal node rather than a leaf to validate a proof. The salt ensures that leaves cannot be concatenated together to form a valid proof, as well as reducing the likelihood of an internal node matching the salt prefix. This is a standard \\\"domain separation\\\" technique in Merkle tree implementations to ensure leaf nodes and internal nodes can never be confused with each other. See Section 2.1 of <https://www.rfc-editor.org/rfc/rfc9162#name-merkle-trees> for more. Uses abi.encodePacked for the salt and abi.encode for the struct to handle complex types (structs with dynamic arrays) while maintaining gas efficiency where possible.\",\"params\":{\"operatorInfo\":\"The BN254 operator info struct containing the operator's public key and stake weights\"},\"returns\":{\"_0\":\"The leaf hash (keccak256 of salt and encoded operator info)\"}},\"calculateOperatorTableLeaf(bytes)\":{\"details\":\"The salt is used to prevent against second preimage attacks: attacks where an attacker can create a partial proof using an internal node rather than a leaf to validate a proof. The salt ensures that leaves cannot be concatenated together to form a valid proof, as well as reducing the likelihood of an internal node matching the salt prefix. This is a standard \\\"domain separation\\\" technique in Merkle tree implementations to ensure leaf nodes and internal nodes can never be confused with each other. See Section 2.1 of <https://www.rfc-editor.org/rfc/rfc9162#name-merkle-trees> for more. Uses abi.encodePacked for both salt and bytes for optimal gas efficiency since both are simple byte arrays without complex nested structures.\",\"params\":{\"operatorTableBytes\":\"The encoded operator table as bytes containing operator set data\"},\"returns\":{\"_0\":\"The leaf hash (keccak256 of salt and operator table bytes)\"}},\"constructor\":{\"details\":\"Disables initializers to prevent implementation initialization\",\"params\":{\"_operatorTableUpdater\":\"Address authorized to update operator tables\",\"_version\":\"The semantic version of the contract\"}},\"getNonsignerOperatorInfo((address,uint32),uint32,uint256)\":{\"details\":\"The non-signing operatorInfo is stored upon a successful certificate verification. Once cached,      merkle proofs for non-signing operators do not need to be passed in as part of the `BN254Certificate` for a given reference timestampNon-signing operators are stored on the `operatorInfoTreeRoot` that is transported in the `BN254OperatorSetInfo` struct on an operator table updateThe tree structure of the `operatorInfoTreeRoot` is as follows. (Below is a tree of height 2 -- in practice, each tree will have a height appropriate for the total number of leaves.) ```                    OperatorInfoTreeRoot                           |                    \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510                    \\u2502             \\u2502              Internal Node    Internal Node               (0-1)           (2-3)                    \\u2502             \\u2502              \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510   \\u250c\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2510              \\u2502           \\u2502   \\u2502       \\u2502         Leaf 0        Leaf 1  Leaf 2  Leaf 3    BN254OperatorInfo  #1      #2      #3         #0 ```\",\"params\":{\"operatorIndex\":\"The operator index\",\"operatorSet\":\"The operatorSet\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"The cached operator info, empty if the operator is not in the cache\"}},\"getOperatorCount((address,uint32),uint32)\":{\"details\":\"Returns 0 if the reference timestamp is not set or the number of operators is 0\",\"params\":{\"operatorSet\":\"The operator set to get the number of operators for\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"The number of operators\"}},\"getOperatorSetInfo((address,uint32),uint32)\":{\"params\":{\"operatorSet\":\"The operator set\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"The operator set info, empty if the operatorSet has not been updated for the given reference timestamp\"}},\"getOperatorSetOwner((address,uint32))\":{\"details\":\"The owner of the OperatorSet is not used by this contract, but can be used by periphery contracts      to gate access control for on-chain operationsThis value is set by the AVS in the `CrossChainRegistry` and transported by the multichain protocol when the operator table is updated\",\"params\":{\"operatorSet\":\"The operatorSet to get the owner of\"},\"returns\":{\"_0\":\"The owner\"}},\"getTotalStakeWeights((address,uint32),uint32)\":{\"details\":\"The stake weights are defined in the AVS's `OperatorTableCalculator` and transported by the multichain protocol. An example      of this can be [slashable_stake, delegated_stake, strategy_i_stake, ...], where each stake type is an element in the array.      The stake weights are defined by the operatorSet's `OperatorTableCalculator` and transported by the multichain protocolFor ECDSA, this function *reverts* if the reference timestamp is not set or the number of operators is 0For BN254, this function returns empty array if the reference timestamp is not set or the number of operators is 0\",\"params\":{\"operatorSet\":\"The operator set to calculate stakes for\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"The sum of stake weights for each stake type, empty if the operatorSet has not been updated for the given reference timestamp\"}},\"isNonsignerCached((address,uint32),uint32,uint256)\":{\"details\":\"The non-signing operatorInfo is stored upon a successful certificate verification. Once cached,      merkle proofs for non-signing operators do not need to be passed in as part of the `BN254Certificate` for a given reference timestamp\",\"params\":{\"operatorIndex\":\"The operator index\",\"operatorSet\":\"The operator set\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"Whether the operator is cached\"}},\"isReferenceTimestampSet((address,uint32),uint32)\":{\"details\":\"The reference timestamp is set when the operator table is updated\",\"params\":{\"operatorSet\":\"The operatorSet to check\",\"referenceTimestamp\":\"The reference timestamp to check\"},\"returns\":{\"_0\":\"Whether the reference timestamp has been updated\"}},\"latestReferenceTimestamp((address,uint32))\":{\"details\":\"The latest reference timestamp is set when the operator table is updatedThe reference timestamp denotes the timestamp at which the operator table was calculated by the multichain protocol\",\"params\":{\"operatorSet\":\"The operatorSet to get the latest reference timestamp of\"},\"returns\":{\"_0\":\"The latest reference timestamp, 0 if the operatorSet has never been updated\"}},\"maxOperatorTableStaleness((address,uint32))\":{\"details\":\"A staleness period of 0 allows for certificates to be verified against any timestamp in the pastStaleness periods cannot be greater than 0 and less than the update cadence of the `OperatorTables`, since      certificates would be unable to be validated against. This value is set and bounds enforced in the `CrossChainRegistry`This value is NOT checkpointed. A new staleness period applies to ALL certificates, regardless of a certificate's reference timestampThis value is set by the AVS in the `CrossChainRegistry` and transported by the multichain protocol when the operator table is updated\",\"params\":{\"operatorSet\":\"The operatorSet to get the max staleness period of\"},\"returns\":{\"_0\":\"The max staleness period\"}},\"trySignatureVerification(bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256))\":{\"details\":\"This function should be used off-chain to validate a signature. Careful consideration should be taken      when parsing `pairingSuccessful` and `signatureValid`. Refer to our internal usage of this function\",\"params\":{\"aggPubkey\":\"The aggregate public key of signers\",\"apkG2\":\"The G2 point representation of the aggregate public key\",\"msgHash\":\"The message hash that was signed\",\"signature\":\"The BLS signature to verify\"},\"returns\":{\"pairingSuccessful\":\"Whether the pairing operation completed successfully\",\"signatureValid\":\"Whether the signature is valid\"}},\"updateOperatorTable((address,uint32),uint32,(bytes32,uint256,(uint256,uint256),uint256[]),(address,uint32))\":{\"details\":\"This function can only be called by the `OperatorTableUpdater` contract, which is itself permissionless to callThe `referenceTimestamp` must correspond to a reference timestamp for a globalTableRoot stored in the `OperatorTableUpdater`      In addition, it must be greater than the latest reference timestamp for the given operatorSetReverts for:      - OnlyTableUpdater: Caller is not the authorized OperatorTableUpdater      - TableUpdateStale: referenceTimestamp is not greater than the latest reference timestampEmits the following events:      - TableUpdated: When operator table is successfully updated\",\"params\":{\"operatorSet\":\"the operatorSet to update the operator table for\",\"operatorSetConfig\":\"the configuration of the operatorSet, which includes the owner and max staleness period\",\"operatorSetInfo\":\"the operator table for this operatorSet. This includes the `totalWeights`, `operatorInfoTreeRoot`, `aggregatePubkey`, and `numOperators`.        See `IOperatorTableCalculator.BN254OperatorSetInfo` for more details\",\"referenceTimestamp\":\"the timestamp at which the operatorSetInfo (i.e. operator table) was sourced\"}},\"verifyCertificate((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]))\":{\"details\":\"The `referenceTimestamp` in the `BN254Certificate` is used to determine the operator table to use for the verificationAVS' are responsible for managing potential race conditions when certificates are signed close to operator table updates. Some examples include:      a. An in-flight certificate for a past reference timestamp and an operator table update for a newer reference timestamp. The AVS should decide whether it         wants to only confirm tasks against the *latest* certificate      b. An in-flight certificate against a stake table with a majority-stake operator that has been slashed or removed from the operatorSetReverts if the certificate's `referenceTimestamp` is too stale with respect to the `maxStalenessPeriod` of the operatorSetThis function is *non-view* because it caches non-signing operator info upon a successful certificate verification. See `getNonsignerOperatorInfo` for more detailsReverts for:      - CertificateStale: Certificate referenceTimestamp is too stale per maxStalenessPeriod      - ReferenceTimestampDoesNotExist: No operator table exists for the referenceTimestamp      - RootDisabled: The global table root for this timestamp has been disabled      - InvalidOperatorIndex: Operator index provided in nonSigner witness is invalid      - NonSignerIndicesNotSorted: Non-signer witnesses are not strictly increasing by operatorIndex      - VerificationFailed: Merkle proof verification failed or BLS signature verification failed\",\"params\":{\"cert\":\"a certificate\",\"operatorSet\":\"the operatorSet that the certificate is for\"},\"returns\":{\"totalSignedStakeWeights\":\"total stake weight that signed the certificate for each stake type. Each         index corresponds to a stake type in the `weights` array in the `BN254OperatorSetInfo` struct\"}},\"verifyCertificateNominal((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint256[])\":{\"details\":\"The `referenceTimestamp` in the `BN254Certificate` is used to determine the operator table to use for the verificationAVS' are responsible for managing potential race conditions when certificates are signed close to operator table updates. Some examples include:      a. An in-flight certificate for a past reference timestamp and an operator table update for a newer reference timestamp. The AVS should decide whether it         wants to only confirm tasks against the *latest* certificate      b. An in-flight certificate against a stake table with a majority-stake operator that has been slashed or removed from the operatorSetReverts if the certificate's `referenceTimestamp` is too stale with respect to the `maxStalenessPeriod` of the operatorSetThis function is *non-view* because it caches non-signing operator info upon a successful certificate verification. See `getNonsignerOperatorInfo` for more detailsReverts for:      - CertificateStale: Certificate referenceTimestamp is too stale per maxStalenessPeriod      - ReferenceTimestampDoesNotExist: No operator table exists for the referenceTimestamp      - RootDisabled: The global table root for this timestamp has been disabled      - InvalidOperatorIndex: Operator index provided in nonSigner witness is invalid      - NonSignerIndicesNotSorted: Non-signer witnesses are not strictly increasing by operatorIndex      - VerificationFailed: Merkle proof verification failed or BLS signature verification failed      - ArrayLengthMismatch: signedStakes length does not equal totalStakeNominalThresholds length\",\"params\":{\"cert\":\"the certificate\",\"operatorSet\":\"the operatorSet that the certificate is for\",\"totalStakeNominalThresholds\":\"the nominal amount of stake that        the signed stake of the certificate should meet. Each index corresponds to        a stake type in the `totalWeights` array in the `BN254OperatorSetInfo`\"},\"returns\":{\"_0\":\"Whether or not certificate is valid and meets nominal thresholds\"}},\"verifyCertificateProportion((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint16[])\":{\"details\":\"The `referenceTimestamp` in the `BN254Certificate` is used to determine the operator table to use for the verificationAVS' are responsible for managing potential race conditions when certificates are signed close to operator table updates. Some examples include:      a. An in-flight certificate for a past reference timestamp and an operator table update for a newer reference timestamp. The AVS should decide whether it         wants to only confirm tasks against the *latest* certificate      b. An in-flight certificate against a stake table with a majority-stake operator that has been slashed or removed from the operatorSetReverts if the certificate's `referenceTimestamp` is too stale with respect to the `maxStalenessPeriod` of the operatorSetThis function is *non-view* because it caches non-signing operator info upon a successful certificate verification. See `getNonsignerOperatorInfo` for more detailsReverts for:      - CertificateStale: Certificate referenceTimestamp is too stale per maxStalenessPeriod      - ReferenceTimestampDoesNotExist: No operator table exists for the referenceTimestamp      - RootDisabled: The global table root for this timestamp has been disabled      - InvalidOperatorIndex: Operator index provided in nonSigner witness is invalid      - NonSignerIndicesNotSorted: Non-signer witnesses are not strictly increasing by operatorIndex      - VerificationFailed: Merkle proof verification failed or BLS signature verification failed      - ArrayLengthMismatch: signedStakes length does not equal totalStakeProportionThresholds length\",\"params\":{\"cert\":\"the certificate\",\"operatorSet\":\"the operatorSet that the certificate is for\",\"totalStakeProportionThresholds\":\"the proportion, in BPS, of total stake weight that        the signed stake of the certificate should meet. Each index corresponds to        a stake type in the `totalWeights` array in the `BN254OperatorSetInfo`\"},\"returns\":{\"_0\":\"Whether or not certificate is valid and meets proportion thresholds\"}},\"version()\":{\"returns\":{\"_0\":\"The version string in SemVer format (e.g., \\\"1.1.1\\\")\"}}},\"title\":\"BN254CertificateVerifier\",\"version\":1},\"userdoc\":{\"errors\":{\"ArrayLengthMismatch()\":[{\"notice\":\"Thrown when array lengths mismatch\"}],\"CertificateStale()\":[{\"notice\":\"Thrown when the certificate is too stale, per the max staleness period of the operatorSet\"}],\"EmptyRoot()\":[{\"notice\":\"Thrown when the root is empty.\"}],\"InvalidIndex()\":[{\"notice\":\"Thrown when the provided index was outside the max index for the tree.\"}],\"InvalidOperatorIndex()\":[{\"notice\":\"thrown when operator index provided in certificate is invalid\"}],\"InvalidProofLength()\":[{\"notice\":\"Thrown when the provided proof was not a multiple of 32, or was empty for SHA256.\"}],\"NonSignerIndicesNotSorted()\":[{\"notice\":\"thrown when the non-signer witnesses are not strictly increasing by operatorIndex\"}],\"OnlyTableUpdater()\":[{\"notice\":\"Thrown when the table updater is not caller\"}],\"ReferenceTimestampDoesNotExist()\":[{\"notice\":\"Thrown when the reference timestamp does not exist\"}],\"RootDisabled()\":[{\"notice\":\"Thrown when the global table root is disabled\"}],\"TableUpdateStale()\":[{\"notice\":\"Thrown when the table update is stale\"}],\"VerificationFailed()\":[{\"notice\":\"Thrown when certificate verification fails\"}]},\"events\":{\"MaxStalenessPeriodUpdated((address,uint32),uint32)\":{\"notice\":\"Emitted when the max staleness period of an operatorSet is updated\"},\"OperatorSetOwnerUpdated((address,uint32),address)\":{\"notice\":\"Emitted when the owner of an operatorSet is updated\"},\"TableUpdated((address,uint32),uint32,(bytes32,uint256,(uint256,uint256),uint256[]))\":{\"notice\":\"Emitted when an BN254 table is updated\"}},\"kind\":\"user\",\"methods\":{\"calculateCertificateDigest(uint32,bytes32)\":{\"notice\":\"Calculate the digest for a certificate, which must be signed over by operators who complete a task\"},\"calculateOperatorInfoLeaf(((uint256,uint256),uint256[]))\":{\"notice\":\"Calculate the leaf hash for an operator info\"},\"calculateOperatorTableLeaf(bytes)\":{\"notice\":\"Calculate the leaf hash for an operator table\"},\"constructor\":{\"notice\":\"Constructor for the certificate verifier\"},\"getNonsignerOperatorInfo((address,uint32),uint32,uint256)\":{\"notice\":\"Get cached nonsigner operator info\"},\"getOperatorCount((address,uint32),uint32)\":{\"notice\":\"Get the number of operators at a given reference timestamp\"},\"getOperatorSetInfo((address,uint32),uint32)\":{\"notice\":\"Get operator set info for a timestamp\"},\"getOperatorSetOwner((address,uint32))\":{\"notice\":\"The address of the owner of the operatorSet\"},\"getTotalStakeWeights((address,uint32),uint32)\":{\"notice\":\"Get the total stake weights for all operators at a given reference timestamp\"},\"isNonsignerCached((address,uint32),uint32,uint256)\":{\"notice\":\"Check if a nonsigner is cached\"},\"isReferenceTimestampSet((address,uint32),uint32)\":{\"notice\":\"Whether the operator table has been updated for a given reference timestamp\"},\"latestReferenceTimestamp((address,uint32))\":{\"notice\":\"The latest reference timestamp of the operator table for a given operatorSet. This value is     updated each time an operator table is updated\"},\"maxOperatorTableStaleness((address,uint32))\":{\"notice\":\"The max staleness period of the operator table for a given operatorSet. This value is AVS-set and         transported by the multichain protocol\"},\"trySignatureVerification(bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256))\":{\"notice\":\"Convenience function to attempt signature verification with gas limit for safety\"},\"updateOperatorTable((address,uint32),uint32,(bytes32,uint256,(uint256,uint256),uint256[]),(address,uint32))\":{\"notice\":\"updates the operatorSet with the operator table (i.e. stake weights) and its configuration\"},\"verifyCertificate((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]))\":{\"notice\":\"verifies a certificate against the operator table for a given reference timestamp\"},\"verifyCertificateNominal((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint256[])\":{\"notice\":\"verifies a certificate and makes sure that the signed stakes meet provided nominal stake thresholds\"},\"verifyCertificateProportion((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint16[])\":{\"notice\":\"verifies a certificate and makes sure that the signed stakes meet provided portions of the total stake weight on the AVS\"},\"version()\":{\"notice\":\"Returns the semantic version string of the contract.\"}},\"notice\":\"Singleton verifier for BN254 certificates across multiple operator sets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/multichain/BN254CertificateVerifier.sol\":\"BN254CertificateVerifier\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin/=lib/openzeppelin-contracts-v4.9.0/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/\",\":zeus-templates/=lib/zeus-templates/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/ShortStringsUpgradeable.sol\":{\"keccak256\":\"0x4e34d967d14c25ef92ef1d4f7a8761949941f46c8f068923bd59d6e09c23b822\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4643a5a7f8f7794f502d5fc6576ec09c10732680b93b44ca1899b6f32e7d5de\",\"dweb:/ipfs/QmVQShpVY4y2Z6XY4ErtkQeNpbGEAcAQXrBeKSti4rX4UB\"]},\"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9df9de7b5da1d1bd3d4b6c073d0174bc4211db60e794a321c8cb5d4eae34685\",\"dweb:/ipfs/QmWe49zj65jayrCe9jZpoWhYUZ1RiwSxyU2s7SBZnMztVy\"]},\"src/contracts/interfaces/IBN254CertificateVerifier.sol\":{\"keccak256\":\"0x754622fcf72aeef0258e0c975d3fb6879a9ee204767c01adaf76288d31066fe2\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a06a3c12dcbe6b99dc080b0f47e3485eed28dbe6eb2653c7dd66e73b94ae617c\",\"dweb:/ipfs/QmddRK2Lo5su9fCgmawZeWhTsjHMhJyA67s8K6X5pHYCtg\"]},\"src/contracts/interfaces/IBaseCertificateVerifier.sol\":{\"keccak256\":\"0x920b561911f8c7125e90b0f83bb00f547c9d6abb93e6c65a563ccbb932dc42c3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1b4860e482342f53c9770e913b2ea27b85faa1783b129161c9f804a928866a26\",\"dweb:/ipfs/QmTEihDACSTx5DaUcCoXqhwc2UeZtkEA9BxTnNbXguf8rN\"]},\"src/contracts/interfaces/ICrossChainRegistry.sol\":{\"keccak256\":\"0xa1c7deb4a8cae1c3a99e2d0d93f041dd807f68eb00e9aba256fcfd964d085178\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b9e5adb44f9cf9c47b96e84b2c8acf8e43fb6a533455acb6d5b3eba767f4e506\",\"dweb:/ipfs/QmS2mhQakzQUWvcxhAx3bXncMRcSUhp4FuokEfNBa65dS6\"]},\"src/contracts/interfaces/IECDSACertificateVerifier.sol\":{\"keccak256\":\"0xcb235587500fd217ca183b1e74eb77152c93187bd7cd2a7ea88b2d1a72dbcc2a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://fc4a601bad41f5fd3f0efd04634364c046705a18c116e39d2124fa0589594b9a\",\"dweb:/ipfs/QmaNai7heqtbuG1QeFLPzqT2AoDKe5UgGE76tLoWzkgZA7\"]},\"src/contracts/interfaces/IKeyRegistrar.sol\":{\"keccak256\":\"0x73c064cefaffe11b80dd55aba654c608da3484bbc573f575e352f267c4f58aee\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://6f4d3e24ab3b99701ec2ee825e2575b168e5dcb2646800599eb18fba61685053\",\"dweb:/ipfs/QmT9LGAftNAQPZugfNsdYu8DWeXqAVCuDqHKUbV2rY9NT1\"]},\"src/contracts/interfaces/IOperatorTableCalculator.sol\":{\"keccak256\":\"0x0d15fae28a379f1b6b98a4446e2782b79f0441bb0476626a83de519a9c3366d0\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://9abd5cf881a5c747e6f5d9ad2acd7bba453a3ed0cf60f880e00246db31d61cbc\",\"dweb:/ipfs/QmcQvqk1BBQ7JJQzce5jBz46xZ8xovu9LyALnWuPFd9Ftd\"]},\"src/contracts/interfaces/IOperatorTableUpdater.sol\":{\"keccak256\":\"0x3dac237e962f6ec156b5bc4fbcde6a9ca95f7646125c3d0612904b9c41096c44\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://e7e8e2ea35dc556d574eb92abcb417157edae470da772caf825ad6fd4ecfdc35\",\"dweb:/ipfs/QmSUQKmWj9jF3chiethUhoDvknfwxrEENgvVy5wXYWkkrm\"]},\"src/contracts/interfaces/ISemVerMixin.sol\":{\"keccak256\":\"0xa7cfe506856653310b402b73baca96af947897c02b5b35a310640443e1332791\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://e23941c3b825e02e3521dbbae63c5b58fb48d17125669fc0cd3c8d5a8c272d6e\",\"dweb:/ipfs/QmaPfH8XkpT1nsEdJe34YbQCwBf1Gq89EvUPvG1wPforZa\"]},\"src/contracts/libraries/BN254.sol\":{\"keccak256\":\"0x24cd24d441907f69ab7dbe002e06f656dd8434235cffd59c97b8438c6a9a98fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://074aa5523e2fe3e6f1b74fb207e08b41d2f6de34412da10e81d7f0b4720942cc\",\"dweb:/ipfs/QmWvdpuvZGeKdEtzaCoAP2gvpggRBwh1cUs4fdWjV9DwW6\"]},\"src/contracts/libraries/BN254SignatureVerifier.sol\":{\"keccak256\":\"0x92afd8306d1dc64e290600cce1da66435319c2b1bc8f9a926080c301ab61a839\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://f6bae17ee733ad08e8e70724a56913d6add435c997ab64c2e922edebf7a7752b\",\"dweb:/ipfs/QmZDA3GEQ5nhn6dWTM3fKRDLF3pjLPYm8KLDXVgBjdUKXt\"]},\"src/contracts/libraries/Merkle.sol\":{\"keccak256\":\"0x072bbd4fbb3ab7a2e25092cb23df2e0d86ed65c4410e6eb642daacb4a2ad88f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f73e3c229d7a186b4bcde7069879c62f775101338868c34e6a0ece8b0471360\",\"dweb:/ipfs/QmddqLU8Z3WcAwnpLFYMgYXuLyy99Z9WH11gCfXTkpu9bZ\"]},\"src/contracts/libraries/OperatorSetLib.sol\":{\"keccak256\":\"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41\",\"dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx\"]},\"src/contracts/mixins/LeafCalculatorMixin.sol\":{\"keccak256\":\"0xafad22d64633200e17a5ce27dc82cf933670d5bd361e7e0cad624f1ade0d6726\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cc46bbd93cf32d3124bcf8a26a0bcc107a89471ee4b89c43f6a1303ca1bc3bab\",\"dweb:/ipfs/QmNNgchPAL36SnzeWP3WevixgJcAT9tZ7mfuf28yJ5KwVS\"]},\"src/contracts/mixins/SemVerMixin.sol\":{\"keccak256\":\"0xbc950c1589c05a76d7c0fec82ad11d15567e2cf8d98770a19963461603f99648\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d483b91672739d608ea510bc1b0f486c13264a50c001c0fa9c909b0282e22546\",\"dweb:/ipfs/QmdByvG58PAG44LWhXKxyrLpHdsr8epaTcEGhfzhH7ssHc\"]},\"src/contracts/multichain/BN254CertificateVerifier.sol\":{\"keccak256\":\"0x3c8dd46e6deac1d6df72aa55437e647b2efdde96a0891e64adc653bc45ae41be\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://4106802bf8a0125a9042cc5ec9f0bd831bfbcfe45bab099e66565087ce9891a3\",\"dweb:/ipfs/QmSFN31yhgBSPnZqFsKgi9H67bt9sh7hbBTwzyvEk4pJeR\"]},\"src/contracts/multichain/BN254CertificateVerifierStorage.sol\":{\"keccak256\":\"0xa1597040c20e86fc3f289a15c532c916ccade37e934fa833600202b951acb35d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://6dfd9f181f6c44c5e9c9273eab00ecde43748647e06a2c29b4d3c60c7c68108b\",\"dweb:/ipfs/QmaKouJtsvav9nxbZAPPN75S5GyrHCGRAB5eiWharahTPC\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IOperatorTableUpdater",
              "name": "_operatorTableUpdater",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_version",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ArrayLengthMismatch"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CertificateStale"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ECAddFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ECMulFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ECPairingFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "EmptyRoot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ExpModFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidIndex"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidOperatorIndex"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidProofLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidShortString"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NonSignerIndicesNotSorted"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OnlyTableUpdater"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ReferenceTimestampDoesNotExist"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RootDisabled"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "str",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "StringTooLong"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TableUpdateStale"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "VerificationFailed"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "maxStalenessPeriod",
              "type": "uint32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MaxStalenessPeriodUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OperatorSetOwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32",
              "indexed": false
            },
            {
              "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo",
              "name": "operatorSetInfo",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "operatorInfoTreeRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "numOperators",
                  "type": "uint256"
                },
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "aggregatePubkey",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint256[]",
                  "name": "totalWeights",
                  "type": "uint256[]"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TableUpdated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPERATOR_INFO_LEAF_SALT",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPERATOR_TABLE_LEAF_SALT",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "messageHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "calculateCertificateDigest",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
              "name": "operatorInfo",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "pubkey",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint256[]",
                  "name": "weights",
                  "type": "uint256[]"
                }
              ]
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "calculateOperatorInfoLeaf",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "operatorTableBytes",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "calculateOperatorTableLeaf",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "operatorIndex",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getNonsignerOperatorInfo",
          "outputs": [
            {
              "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "pubkey",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint256[]",
                  "name": "weights",
                  "type": "uint256[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOperatorCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOperatorSetInfo",
          "outputs": [
            {
              "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "operatorInfoTreeRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "numOperators",
                  "type": "uint256"
                },
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "aggregatePubkey",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint256[]",
                  "name": "totalWeights",
                  "type": "uint256[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOperatorSetOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalStakeWeights",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "operatorIndex",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isNonsignerCached",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isReferenceTimestampSet",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "latestReferenceTimestamp",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "maxOperatorTableStaleness",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "operatorTableUpdater",
          "outputs": [
            {
              "internalType": "contract IOperatorTableUpdater",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "msgHash",
              "type": "bytes32"
            },
            {
              "internalType": "struct BN254.G1Point",
              "name": "aggPubkey",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "X",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "Y",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "struct BN254.G2Point",
              "name": "apkG2",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "X",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "Y",
                  "type": "uint256[2]"
                }
              ]
            },
            {
              "internalType": "struct BN254.G1Point",
              "name": "signature",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "X",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "Y",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "trySignatureVerification",
          "outputs": [
            {
              "internalType": "bool",
              "name": "pairingSuccessful",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "signatureValid",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "referenceTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorSetInfo",
              "name": "operatorSetInfo",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "operatorInfoTreeRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "numOperators",
                  "type": "uint256"
                },
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "aggregatePubkey",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint256[]",
                  "name": "totalWeights",
                  "type": "uint256[]"
                }
              ]
            },
            {
              "internalType": "struct ICrossChainRegistryTypes.OperatorSetConfig",
              "name": "operatorSetConfig",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "maxStalenessPeriod",
                  "type": "uint32"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateOperatorTable"
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "struct IBN254CertificateVerifierTypes.BN254Certificate",
              "name": "cert",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "referenceTimestamp",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "messageHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "signature",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct BN254.G2Point",
                  "name": "apk",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256[2]",
                      "name": "X",
                      "type": "uint256[2]"
                    },
                    {
                      "internalType": "uint256[2]",
                      "name": "Y",
                      "type": "uint256[2]"
                    }
                  ]
                },
                {
                  "internalType": "struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]",
                  "name": "nonSignerWitnesses",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "operatorIndex",
                      "type": "uint32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "operatorInfoProof",
                      "type": "bytes"
                    },
                    {
                      "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
                      "name": "operatorInfo",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct BN254.G1Point",
                          "name": "pubkey",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "X",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "Y",
                              "type": "uint256"
                            }
                          ]
                        },
                        {
                          "internalType": "uint256[]",
                          "name": "weights",
                          "type": "uint256[]"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "verifyCertificate",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "totalSignedStakeWeights",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "struct IBN254CertificateVerifierTypes.BN254Certificate",
              "name": "cert",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "referenceTimestamp",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "messageHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "signature",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct BN254.G2Point",
                  "name": "apk",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256[2]",
                      "name": "X",
                      "type": "uint256[2]"
                    },
                    {
                      "internalType": "uint256[2]",
                      "name": "Y",
                      "type": "uint256[2]"
                    }
                  ]
                },
                {
                  "internalType": "struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]",
                  "name": "nonSignerWitnesses",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "operatorIndex",
                      "type": "uint32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "operatorInfoProof",
                      "type": "bytes"
                    },
                    {
                      "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
                      "name": "operatorInfo",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct BN254.G1Point",
                          "name": "pubkey",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "X",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "Y",
                              "type": "uint256"
                            }
                          ]
                        },
                        {
                          "internalType": "uint256[]",
                          "name": "weights",
                          "type": "uint256[]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "totalStakeNominalThresholds",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "verifyCertificateNominal",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OperatorSet",
              "name": "operatorSet",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "avs",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "struct IBN254CertificateVerifierTypes.BN254Certificate",
              "name": "cert",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "referenceTimestamp",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "messageHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct BN254.G1Point",
                  "name": "signature",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct BN254.G2Point",
                  "name": "apk",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256[2]",
                      "name": "X",
                      "type": "uint256[2]"
                    },
                    {
                      "internalType": "uint256[2]",
                      "name": "Y",
                      "type": "uint256[2]"
                    }
                  ]
                },
                {
                  "internalType": "struct IBN254CertificateVerifierTypes.BN254OperatorInfoWitness[]",
                  "name": "nonSignerWitnesses",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "operatorIndex",
                      "type": "uint32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "operatorInfoProof",
                      "type": "bytes"
                    },
                    {
                      "internalType": "struct IOperatorTableCalculatorTypes.BN254OperatorInfo",
                      "name": "operatorInfo",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct BN254.G1Point",
                          "name": "pubkey",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint256",
                              "name": "X",
                              "type": "uint256"
                            },
                            {
                              "internalType": "uint256",
                              "name": "Y",
                              "type": "uint256"
                            }
                          ]
                        },
                        {
                          "internalType": "uint256[]",
                          "name": "weights",
                          "type": "uint256[]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "internalType": "uint16[]",
              "name": "totalStakeProportionThresholds",
              "type": "uint16[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "verifyCertificateProportion",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "calculateCertificateDigest(uint32,bytes32)": {
            "details": "This is a chain-agnostic digest, so it can be used to verify certificates across      multiple destination chains",
            "params": {
              "messageHash": "The message hash of the task",
              "referenceTimestamp": "The reference timestamp"
            },
            "returns": {
              "_0": "The digest"
            }
          },
          "calculateOperatorInfoLeaf(((uint256,uint256),uint256[]))": {
            "details": "The salt is used to prevent against second preimage attacks: attacks where an attacker can create a partial proof using an internal node rather than a leaf to validate a proof. The salt ensures that leaves cannot be concatenated together to form a valid proof, as well as reducing the likelihood of an internal node matching the salt prefix. This is a standard \"domain separation\" technique in Merkle tree implementations to ensure leaf nodes and internal nodes can never be confused with each other. See Section 2.1 of <https://www.rfc-editor.org/rfc/rfc9162#name-merkle-trees> for more. Uses abi.encodePacked for the salt and abi.encode for the struct to handle complex types (structs with dynamic arrays) while maintaining gas efficiency where possible.",
            "params": {
              "operatorInfo": "The BN254 operator info struct containing the operator's public key and stake weights"
            },
            "returns": {
              "_0": "The leaf hash (keccak256 of salt and encoded operator info)"
            }
          },
          "calculateOperatorTableLeaf(bytes)": {
            "details": "The salt is used to prevent against second preimage attacks: attacks where an attacker can create a partial proof using an internal node rather than a leaf to validate a proof. The salt ensures that leaves cannot be concatenated together to form a valid proof, as well as reducing the likelihood of an internal node matching the salt prefix. This is a standard \"domain separation\" technique in Merkle tree implementations to ensure leaf nodes and internal nodes can never be confused with each other. See Section 2.1 of <https://www.rfc-editor.org/rfc/rfc9162#name-merkle-trees> for more. Uses abi.encodePacked for both salt and bytes for optimal gas efficiency since both are simple byte arrays without complex nested structures.",
            "params": {
              "operatorTableBytes": "The encoded operator table as bytes containing operator set data"
            },
            "returns": {
              "_0": "The leaf hash (keccak256 of salt and operator table bytes)"
            }
          },
          "constructor": {
            "details": "Disables initializers to prevent implementation initialization",
            "params": {
              "_operatorTableUpdater": "Address authorized to update operator tables",
              "_version": "The semantic version of the contract"
            }
          },
          "getNonsignerOperatorInfo((address,uint32),uint32,uint256)": {
            "details": "The non-signing operatorInfo is stored upon a successful certificate verification. Once cached,      merkle proofs for non-signing operators do not need to be passed in as part of the `BN254Certificate` for a given reference timestampNon-signing operators are stored on the `operatorInfoTreeRoot` that is transported in the `BN254OperatorSetInfo` struct on an operator table updateThe tree structure of the `operatorInfoTreeRoot` is as follows. (Below is a tree of height 2 -- in practice, each tree will have a height appropriate for the total number of leaves.) ```                    OperatorInfoTreeRoot                           |                    ┌──────┴──────┐                    │             │              Internal Node    Internal Node               (0-1)           (2-3)                    │             │              ┌─────┴─────┐   ┌───┴───┐              │           │   │       │         Leaf 0        Leaf 1  Leaf 2  Leaf 3    BN254OperatorInfo  #1      #2      #3         #0 ```",
            "params": {
              "operatorIndex": "The operator index",
              "operatorSet": "The operatorSet",
              "referenceTimestamp": "The reference timestamp"
            },
            "returns": {
              "_0": "The cached operator info, empty if the operator is not in the cache"
            }
          },
          "getOperatorCount((address,uint32),uint32)": {
            "details": "Returns 0 if the reference timestamp is not set or the number of operators is 0",
            "params": {
              "operatorSet": "The operator set to get the number of operators for",
              "referenceTimestamp": "The reference timestamp"
            },
            "returns": {
              "_0": "The number of operators"
            }
          },
          "getOperatorSetInfo((address,uint32),uint32)": {
            "params": {
              "operatorSet": "The operator set",
              "referenceTimestamp": "The reference timestamp"
            },
            "returns": {
              "_0": "The operator set info, empty if the operatorSet has not been updated for the given reference timestamp"
            }
          },
          "getOperatorSetOwner((address,uint32))": {
            "details": "The owner of the OperatorSet is not used by this contract, but can be used by periphery contracts      to gate access control for on-chain operationsThis value is set by the AVS in the `CrossChainRegistry` and transported by the multichain protocol when the operator table is updated",
            "params": {
              "operatorSet": "The operatorSet to get the owner of"
            },
            "returns": {
              "_0": "The owner"
            }
          },
          "getTotalStakeWeights((address,uint32),uint32)": {
            "details": "The stake weights are defined in the AVS's `OperatorTableCalculator` and transported by the multichain protocol. An example      of this can be [slashable_stake, delegated_stake, strategy_i_stake, ...], where each stake type is an element in the array.      The stake weights are defined by the operatorSet's `OperatorTableCalculator` and transported by the multichain protocolFor ECDSA, this function *reverts* if the reference timestamp is not set or the number of operators is 0For BN254, this function returns empty array if the reference timestamp is not set or the number of operators is 0",
            "params": {
              "operatorSet": "The operator set to calculate stakes for",
              "referenceTimestamp": "The reference timestamp"
            },
            "returns": {
              "_0": "The sum of stake weights for each stake type, empty if the operatorSet has not been updated for the given reference timestamp"
            }
          },
          "isNonsignerCached((address,uint32),uint32,uint256)": {
            "details": "The non-signing operatorInfo is stored upon a successful certificate verification. Once cached,      merkle proofs for non-signing operators do not need to be passed in as part of the `BN254Certificate` for a given reference timestamp",
            "params": {
              "operatorIndex": "The operator index",
              "operatorSet": "The operator set",
              "referenceTimestamp": "The reference timestamp"
            },
            "returns": {
              "_0": "Whether the operator is cached"
            }
          },
          "isReferenceTimestampSet((address,uint32),uint32)": {
            "details": "The reference timestamp is set when the operator table is updated",
            "params": {
              "operatorSet": "The operatorSet to check",
              "referenceTimestamp": "The reference timestamp to check"
            },
            "returns": {
              "_0": "Whether the reference timestamp has been updated"
            }
          },
          "latestReferenceTimestamp((address,uint32))": {
            "details": "The latest reference timestamp is set when the operator table is updatedThe reference timestamp denotes the timestamp at which the operator table was calculated by the multichain protocol",
            "params": {
              "operatorSet": "The operatorSet to get the latest reference timestamp of"
            },
            "returns": {
              "_0": "The latest reference timestamp, 0 if the operatorSet has never been updated"
            }
          },
          "maxOperatorTableStaleness((address,uint32))": {
            "details": "A staleness period of 0 allows for certificates to be verified against any timestamp in the pastStaleness periods cannot be greater than 0 and less than the update cadence of the `OperatorTables`, since      certificates would be unable to be validated against. This value is set and bounds enforced in the `CrossChainRegistry`This value is NOT checkpointed. A new staleness period applies to ALL certificates, regardless of a certificate's reference timestampThis value is set by the AVS in the `CrossChainRegistry` and transported by the multichain protocol when the operator table is updated",
            "params": {
              "operatorSet": "The operatorSet to get the max staleness period of"
            },
            "returns": {
              "_0": "The max staleness period"
            }
          },
          "trySignatureVerification(bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256))": {
            "details": "This function should be used off-chain to validate a signature. Careful consideration should be taken      when parsing `pairingSuccessful` and `signatureValid`. Refer to our internal usage of this function",
            "params": {
              "aggPubkey": "The aggregate public key of signers",
              "apkG2": "The G2 point representation of the aggregate public key",
              "msgHash": "The message hash that was signed",
              "signature": "The BLS signature to verify"
            },
            "returns": {
              "pairingSuccessful": "Whether the pairing operation completed successfully",
              "signatureValid": "Whether the signature is valid"
            }
          },
          "updateOperatorTable((address,uint32),uint32,(bytes32,uint256,(uint256,uint256),uint256[]),(address,uint32))": {
            "details": "This function can only be called by the `OperatorTableUpdater` contract, which is itself permissionless to callThe `referenceTimestamp` must correspond to a reference timestamp for a globalTableRoot stored in the `OperatorTableUpdater`      In addition, it must be greater than the latest reference timestamp for the given operatorSetReverts for:      - OnlyTableUpdater: Caller is not the authorized OperatorTableUpdater      - TableUpdateStale: referenceTimestamp is not greater than the latest reference timestampEmits the following events:      - TableUpdated: When operator table is successfully updated",
            "params": {
              "operatorSet": "the operatorSet to update the operator table for",
              "operatorSetConfig": "the configuration of the operatorSet, which includes the owner and max staleness period",
              "operatorSetInfo": "the operator table for this operatorSet. This includes the `totalWeights`, `operatorInfoTreeRoot`, `aggregatePubkey`, and `numOperators`.        See `IOperatorTableCalculator.BN254OperatorSetInfo` for more details",
              "referenceTimestamp": "the timestamp at which the operatorSetInfo (i.e. operator table) was sourced"
            }
          },
          "verifyCertificate((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]))": {
            "details": "The `referenceTimestamp` in the `BN254Certificate` is used to determine the operator table to use for the verificationAVS' are responsible for managing potential race conditions when certificates are signed close to operator table updates. Some examples include:      a. An in-flight certificate for a past reference timestamp and an operator table update for a newer reference timestamp. The AVS should decide whether it         wants to only confirm tasks against the *latest* certificate      b. An in-flight certificate against a stake table with a majority-stake operator that has been slashed or removed from the operatorSetReverts if the certificate's `referenceTimestamp` is too stale with respect to the `maxStalenessPeriod` of the operatorSetThis function is *non-view* because it caches non-signing operator info upon a successful certificate verification. See `getNonsignerOperatorInfo` for more detailsReverts for:      - CertificateStale: Certificate referenceTimestamp is too stale per maxStalenessPeriod      - ReferenceTimestampDoesNotExist: No operator table exists for the referenceTimestamp      - RootDisabled: The global table root for this timestamp has been disabled      - InvalidOperatorIndex: Operator index provided in nonSigner witness is invalid      - NonSignerIndicesNotSorted: Non-signer witnesses are not strictly increasing by operatorIndex      - VerificationFailed: Merkle proof verification failed or BLS signature verification failed",
            "params": {
              "cert": "a certificate",
              "operatorSet": "the operatorSet that the certificate is for"
            },
            "returns": {
              "totalSignedStakeWeights": "total stake weight that signed the certificate for each stake type. Each         index corresponds to a stake type in the `weights` array in the `BN254OperatorSetInfo` struct"
            }
          },
          "verifyCertificateNominal((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint256[])": {
            "details": "The `referenceTimestamp` in the `BN254Certificate` is used to determine the operator table to use for the verificationAVS' are responsible for managing potential race conditions when certificates are signed close to operator table updates. Some examples include:      a. An in-flight certificate for a past reference timestamp and an operator table update for a newer reference timestamp. The AVS should decide whether it         wants to only confirm tasks against the *latest* certificate      b. An in-flight certificate against a stake table with a majority-stake operator that has been slashed or removed from the operatorSetReverts if the certificate's `referenceTimestamp` is too stale with respect to the `maxStalenessPeriod` of the operatorSetThis function is *non-view* because it caches non-signing operator info upon a successful certificate verification. See `getNonsignerOperatorInfo` for more detailsReverts for:      - CertificateStale: Certificate referenceTimestamp is too stale per maxStalenessPeriod      - ReferenceTimestampDoesNotExist: No operator table exists for the referenceTimestamp      - RootDisabled: The global table root for this timestamp has been disabled      - InvalidOperatorIndex: Operator index provided in nonSigner witness is invalid      - NonSignerIndicesNotSorted: Non-signer witnesses are not strictly increasing by operatorIndex      - VerificationFailed: Merkle proof verification failed or BLS signature verification failed      - ArrayLengthMismatch: signedStakes length does not equal totalStakeNominalThresholds length",
            "params": {
              "cert": "the certificate",
              "operatorSet": "the operatorSet that the certificate is for",
              "totalStakeNominalThresholds": "the nominal amount of stake that        the signed stake of the certificate should meet. Each index corresponds to        a stake type in the `totalWeights` array in the `BN254OperatorSetInfo`"
            },
            "returns": {
              "_0": "Whether or not certificate is valid and meets nominal thresholds"
            }
          },
          "verifyCertificateProportion((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint16[])": {
            "details": "The `referenceTimestamp` in the `BN254Certificate` is used to determine the operator table to use for the verificationAVS' are responsible for managing potential race conditions when certificates are signed close to operator table updates. Some examples include:      a. An in-flight certificate for a past reference timestamp and an operator table update for a newer reference timestamp. The AVS should decide whether it         wants to only confirm tasks against the *latest* certificate      b. An in-flight certificate against a stake table with a majority-stake operator that has been slashed or removed from the operatorSetReverts if the certificate's `referenceTimestamp` is too stale with respect to the `maxStalenessPeriod` of the operatorSetThis function is *non-view* because it caches non-signing operator info upon a successful certificate verification. See `getNonsignerOperatorInfo` for more detailsReverts for:      - CertificateStale: Certificate referenceTimestamp is too stale per maxStalenessPeriod      - ReferenceTimestampDoesNotExist: No operator table exists for the referenceTimestamp      - RootDisabled: The global table root for this timestamp has been disabled      - InvalidOperatorIndex: Operator index provided in nonSigner witness is invalid      - NonSignerIndicesNotSorted: Non-signer witnesses are not strictly increasing by operatorIndex      - VerificationFailed: Merkle proof verification failed or BLS signature verification failed      - ArrayLengthMismatch: signedStakes length does not equal totalStakeProportionThresholds length",
            "params": {
              "cert": "the certificate",
              "operatorSet": "the operatorSet that the certificate is for",
              "totalStakeProportionThresholds": "the proportion, in BPS, of total stake weight that        the signed stake of the certificate should meet. Each index corresponds to        a stake type in the `totalWeights` array in the `BN254OperatorSetInfo`"
            },
            "returns": {
              "_0": "Whether or not certificate is valid and meets proportion thresholds"
            }
          },
          "version()": {
            "returns": {
              "_0": "The version string in SemVer format (e.g., \"1.1.1\")"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "calculateCertificateDigest(uint32,bytes32)": {
            "notice": "Calculate the digest for a certificate, which must be signed over by operators who complete a task"
          },
          "calculateOperatorInfoLeaf(((uint256,uint256),uint256[]))": {
            "notice": "Calculate the leaf hash for an operator info"
          },
          "calculateOperatorTableLeaf(bytes)": {
            "notice": "Calculate the leaf hash for an operator table"
          },
          "constructor": {
            "notice": "Constructor for the certificate verifier"
          },
          "getNonsignerOperatorInfo((address,uint32),uint32,uint256)": {
            "notice": "Get cached nonsigner operator info"
          },
          "getOperatorCount((address,uint32),uint32)": {
            "notice": "Get the number of operators at a given reference timestamp"
          },
          "getOperatorSetInfo((address,uint32),uint32)": {
            "notice": "Get operator set info for a timestamp"
          },
          "getOperatorSetOwner((address,uint32))": {
            "notice": "The address of the owner of the operatorSet"
          },
          "getTotalStakeWeights((address,uint32),uint32)": {
            "notice": "Get the total stake weights for all operators at a given reference timestamp"
          },
          "isNonsignerCached((address,uint32),uint32,uint256)": {
            "notice": "Check if a nonsigner is cached"
          },
          "isReferenceTimestampSet((address,uint32),uint32)": {
            "notice": "Whether the operator table has been updated for a given reference timestamp"
          },
          "latestReferenceTimestamp((address,uint32))": {
            "notice": "The latest reference timestamp of the operator table for a given operatorSet. This value is     updated each time an operator table is updated"
          },
          "maxOperatorTableStaleness((address,uint32))": {
            "notice": "The max staleness period of the operator table for a given operatorSet. This value is AVS-set and         transported by the multichain protocol"
          },
          "trySignatureVerification(bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256))": {
            "notice": "Convenience function to attempt signature verification with gas limit for safety"
          },
          "updateOperatorTable((address,uint32),uint32,(bytes32,uint256,(uint256,uint256),uint256[]),(address,uint32))": {
            "notice": "updates the operatorSet with the operator table (i.e. stake weights) and its configuration"
          },
          "verifyCertificate((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]))": {
            "notice": "verifies a certificate against the operator table for a given reference timestamp"
          },
          "verifyCertificateNominal((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint256[])": {
            "notice": "verifies a certificate and makes sure that the signed stakes meet provided nominal stake thresholds"
          },
          "verifyCertificateProportion((address,uint32),(uint32,bytes32,(uint256,uint256),(uint256[2],uint256[2]),(uint32,bytes,((uint256,uint256),uint256[]))[]),uint16[])": {
            "notice": "verifies a certificate and makes sure that the signed stakes meet provided portions of the total stake weight on the AVS"
          },
          "version()": {
            "notice": "Returns the semantic version string of the contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable-v4.9.0/",
        "@openzeppelin/=lib/openzeppelin-contracts-v4.9.0/",
        "ds-test/=lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/",
        "openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/",
        "zeus-templates/=lib/zeus-templates/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/contracts/multichain/BN254CertificateVerifier.sol": "BN254CertificateVerifier"
      },
      "evmVersion": "prague",
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794",
        "urls": [
          "bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e",
          "dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422",
        "urls": [
          "bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b",
          "dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/ShortStringsUpgradeable.sol": {
        "keccak256": "0x4e34d967d14c25ef92ef1d4f7a8761949941f46c8f068923bd59d6e09c23b822",
        "urls": [
          "bzz-raw://a4643a5a7f8f7794f502d5fc6576ec09c10732680b93b44ca1899b6f32e7d5de",
          "dweb:/ipfs/QmVQShpVY4y2Z6XY4ErtkQeNpbGEAcAQXrBeKSti4rX4UB"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/StorageSlotUpgradeable.sol": {
        "keccak256": "0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908",
        "urls": [
          "bzz-raw://a9df9de7b5da1d1bd3d4b6c073d0174bc4211db60e794a321c8cb5d4eae34685",
          "dweb:/ipfs/QmWe49zj65jayrCe9jZpoWhYUZ1RiwSxyU2s7SBZnMztVy"
        ],
        "license": "MIT"
      },
      "src/contracts/interfaces/IBN254CertificateVerifier.sol": {
        "keccak256": "0x754622fcf72aeef0258e0c975d3fb6879a9ee204767c01adaf76288d31066fe2",
        "urls": [
          "bzz-raw://a06a3c12dcbe6b99dc080b0f47e3485eed28dbe6eb2653c7dd66e73b94ae617c",
          "dweb:/ipfs/QmddRK2Lo5su9fCgmawZeWhTsjHMhJyA67s8K6X5pHYCtg"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/interfaces/IBaseCertificateVerifier.sol": {
        "keccak256": "0x920b561911f8c7125e90b0f83bb00f547c9d6abb93e6c65a563ccbb932dc42c3",
        "urls": [
          "bzz-raw://1b4860e482342f53c9770e913b2ea27b85faa1783b129161c9f804a928866a26",
          "dweb:/ipfs/QmTEihDACSTx5DaUcCoXqhwc2UeZtkEA9BxTnNbXguf8rN"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/interfaces/ICrossChainRegistry.sol": {
        "keccak256": "0xa1c7deb4a8cae1c3a99e2d0d93f041dd807f68eb00e9aba256fcfd964d085178",
        "urls": [
          "bzz-raw://b9e5adb44f9cf9c47b96e84b2c8acf8e43fb6a533455acb6d5b3eba767f4e506",
          "dweb:/ipfs/QmS2mhQakzQUWvcxhAx3bXncMRcSUhp4FuokEfNBa65dS6"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/interfaces/IECDSACertificateVerifier.sol": {
        "keccak256": "0xcb235587500fd217ca183b1e74eb77152c93187bd7cd2a7ea88b2d1a72dbcc2a",
        "urls": [
          "bzz-raw://fc4a601bad41f5fd3f0efd04634364c046705a18c116e39d2124fa0589594b9a",
          "dweb:/ipfs/QmaNai7heqtbuG1QeFLPzqT2AoDKe5UgGE76tLoWzkgZA7"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/interfaces/IKeyRegistrar.sol": {
        "keccak256": "0x73c064cefaffe11b80dd55aba654c608da3484bbc573f575e352f267c4f58aee",
        "urls": [
          "bzz-raw://6f4d3e24ab3b99701ec2ee825e2575b168e5dcb2646800599eb18fba61685053",
          "dweb:/ipfs/QmT9LGAftNAQPZugfNsdYu8DWeXqAVCuDqHKUbV2rY9NT1"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/interfaces/IOperatorTableCalculator.sol": {
        "keccak256": "0x0d15fae28a379f1b6b98a4446e2782b79f0441bb0476626a83de519a9c3366d0",
        "urls": [
          "bzz-raw://9abd5cf881a5c747e6f5d9ad2acd7bba453a3ed0cf60f880e00246db31d61cbc",
          "dweb:/ipfs/QmcQvqk1BBQ7JJQzce5jBz46xZ8xovu9LyALnWuPFd9Ftd"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/interfaces/IOperatorTableUpdater.sol": {
        "keccak256": "0x3dac237e962f6ec156b5bc4fbcde6a9ca95f7646125c3d0612904b9c41096c44",
        "urls": [
          "bzz-raw://e7e8e2ea35dc556d574eb92abcb417157edae470da772caf825ad6fd4ecfdc35",
          "dweb:/ipfs/QmSUQKmWj9jF3chiethUhoDvknfwxrEENgvVy5wXYWkkrm"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/interfaces/ISemVerMixin.sol": {
        "keccak256": "0xa7cfe506856653310b402b73baca96af947897c02b5b35a310640443e1332791",
        "urls": [
          "bzz-raw://e23941c3b825e02e3521dbbae63c5b58fb48d17125669fc0cd3c8d5a8c272d6e",
          "dweb:/ipfs/QmaPfH8XkpT1nsEdJe34YbQCwBf1Gq89EvUPvG1wPforZa"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/libraries/BN254.sol": {
        "keccak256": "0x24cd24d441907f69ab7dbe002e06f656dd8434235cffd59c97b8438c6a9a98fc",
        "urls": [
          "bzz-raw://074aa5523e2fe3e6f1b74fb207e08b41d2f6de34412da10e81d7f0b4720942cc",
          "dweb:/ipfs/QmWvdpuvZGeKdEtzaCoAP2gvpggRBwh1cUs4fdWjV9DwW6"
        ],
        "license": "MIT"
      },
      "src/contracts/libraries/BN254SignatureVerifier.sol": {
        "keccak256": "0x92afd8306d1dc64e290600cce1da66435319c2b1bc8f9a926080c301ab61a839",
        "urls": [
          "bzz-raw://f6bae17ee733ad08e8e70724a56913d6add435c997ab64c2e922edebf7a7752b",
          "dweb:/ipfs/QmZDA3GEQ5nhn6dWTM3fKRDLF3pjLPYm8KLDXVgBjdUKXt"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/libraries/Merkle.sol": {
        "keccak256": "0x072bbd4fbb3ab7a2e25092cb23df2e0d86ed65c4410e6eb642daacb4a2ad88f4",
        "urls": [
          "bzz-raw://6f73e3c229d7a186b4bcde7069879c62f775101338868c34e6a0ece8b0471360",
          "dweb:/ipfs/QmddqLU8Z3WcAwnpLFYMgYXuLyy99Z9WH11gCfXTkpu9bZ"
        ],
        "license": "MIT"
      },
      "src/contracts/libraries/OperatorSetLib.sol": {
        "keccak256": "0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812",
        "urls": [
          "bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41",
          "dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/mixins/LeafCalculatorMixin.sol": {
        "keccak256": "0xafad22d64633200e17a5ce27dc82cf933670d5bd361e7e0cad624f1ade0d6726",
        "urls": [
          "bzz-raw://cc46bbd93cf32d3124bcf8a26a0bcc107a89471ee4b89c43f6a1303ca1bc3bab",
          "dweb:/ipfs/QmNNgchPAL36SnzeWP3WevixgJcAT9tZ7mfuf28yJ5KwVS"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/mixins/SemVerMixin.sol": {
        "keccak256": "0xbc950c1589c05a76d7c0fec82ad11d15567e2cf8d98770a19963461603f99648",
        "urls": [
          "bzz-raw://d483b91672739d608ea510bc1b0f486c13264a50c001c0fa9c909b0282e22546",
          "dweb:/ipfs/QmdByvG58PAG44LWhXKxyrLpHdsr8epaTcEGhfzhH7ssHc"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/multichain/BN254CertificateVerifier.sol": {
        "keccak256": "0x3c8dd46e6deac1d6df72aa55437e647b2efdde96a0891e64adc653bc45ae41be",
        "urls": [
          "bzz-raw://4106802bf8a0125a9042cc5ec9f0bd831bfbcfe45bab099e66565087ce9891a3",
          "dweb:/ipfs/QmSFN31yhgBSPnZqFsKgi9H67bt9sh7hbBTwzyvEk4pJeR"
        ],
        "license": "BUSL-1.1"
      },
      "src/contracts/multichain/BN254CertificateVerifierStorage.sol": {
        "keccak256": "0xa1597040c20e86fc3f289a15c532c916ccade37e934fa833600202b951acb35d",
        "urls": [
          "bzz-raw://6dfd9f181f6c44c5e9c9273eab00ecde43748647e06a2c29b4d3c60c7c68108b",
          "dweb:/ipfs/QmaKouJtsvav9nxbZAPPN75S5GyrHCGRAB5eiWharahTPC"
        ],
        "license": "BUSL-1.1"
      }
    },
    "version": 1
  },
  "id": 184
}